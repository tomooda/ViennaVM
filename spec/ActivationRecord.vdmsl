module ActivationRecord
imports
    from Data all,
    from Memory all
exports all
definitions
values
     DYNAMIC_LINK_SLOT = 1;
     RETURN_IP_REG_SLOT = 2;
     RETURN_CR_SLOT = 3;
     LOCAL_SLOT_OFFSET = 3;

operations
    alloc_ar : Data`Pointer * Data`Word * Data`Dword * Data`Pointer * nat ==> Data`Pointer
    alloc_ar(caller, ret_reg, ret_ip, ret_cr, num_locals) ==
        let pointer = Memory`alloc(LOCAL_SLOT_OFFSET + num_locals)
        in
            (Memory`write_slot(pointer, DYNAMIC_LINK_SLOT, Data`pointer2oid(caller));
            Memory`write_slot(
                pointer,
                RETURN_IP_REG_SLOT,
                Data`int2oid(ret_ip + ret_reg  * 0x100000000));
            Memory`write_slot(pointer, RETURN_CR_SLOT, Data`pointer2oid(ret_cr));
            return pointer);
    
    read_dynamic_link : Data`Pointer ==> Data`Pointer
    read_dynamic_link(ar) ==
        return Data`oid2pointer(Memory`read_slot(ar, DYNAMIC_LINK_SLOT));
    
    read_ret_reg : Data`Pointer ==> Data`Word
    read_ret_reg(pointer) ==
        return Data`oid2int(Memory`read_slot(pointer, RETURN_IP_REG_SLOT))
            div 0x100000000;
    
    read_return_ip : Data`Pointer ==> Data`Dword
    read_return_ip(pointer) ==
        return Data`oid2int(Memory`read_slot(pointer, RETURN_IP_REG_SLOT))
            mod 0x100000000;
    
    read_return_cr : Data`Pointer ==> Data`Pointer
    read_return_cr(pointer) ==
        return Data`oid2pointer(Memory`read_slot(pointer, RETURN_CR_SLOT));
    
    read_local : Data`Pointer * Data`Dword ==> Data`OID
    read_local(pointer, i) ==
        return Memory`read_slot(pointer, LOCAL_SLOT_OFFSET + i);
    
    write_local : Data`Pointer * Data`Dword * Data`OID ==> ()
    write_local(pointer, i, oid) ==
        return Memory`write_slot(pointer, LOCAL_SLOT_OFFSET + i, oid);

end ActivationRecord
