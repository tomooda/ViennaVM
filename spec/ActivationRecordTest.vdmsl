module ActivationRecordTest
imports
    from ActivationRecord all,
    from Data all,
    from Memory all,
    from UnitTesting operations assertEquals renamed assertEquals;
exports all
definitions
operations
    test_alloc_ar : () ==> ()
    test_alloc_ar() ==
        let args = Memory`alloc(3)
        in
            (Memory`write_slot(args, 1, Data`int2oid(10));
            Memory`write_slot(args, 2, Data`int2oid(20));
            Memory`write_slot(args, 3, Data`int2oid(30));
            let
                ar =
                    ActivationRecord`alloc_ar(
                        Data`invalidPointerValue, args, 1, 0, Data`invalidPointerValue, 2)
            in
                (assertEquals(Data`oid2int(ActivationRecord`read_arg(ar, 1)), 10, "arg(1) = 10");
                assertEquals(Data`oid2int(ActivationRecord`read_arg(ar, 2)), 20, "arg(2) = 20");
                assertEquals(Data`oid2int(ActivationRecord`read_arg(ar, 3)), 30, "arg(3) = 30");
                assertEquals(ActivationRecord`read_ret_reg(ar), 1, "r1 <- retvalue");
                assertEquals(ActivationRecord`read_return_ip(ar), 0, "ip <- 0");
                assertEquals(
                    ActivationRecord`read_return_cr(ar),
                    Data`invalidPointerValue,
                    "cr <- nil");
                ActivationRecord`write_local(ar, 1, Data`int2oid(100));
                assertEquals(
                    Data`oid2int(ActivationRecord`read_local(ar, 1)),
                    100,
                    "local(1) = 100")));
    
    test_alloc_ar0 : () ==> ()
    test_alloc_ar0() ==
        let
            ar =
                ActivationRecord`alloc_ar0(
                    Data`invalidPointerValue, 1, 0, Data`invalidPointerValue, 2)
        in
            (assertEquals(ActivationRecord`read_ret_reg(ar), 1, "r1 <- retvalue");
            assertEquals(ActivationRecord`read_return_ip(ar), 0, "ip <- 0");
            assertEquals(
                ActivationRecord`read_return_cr(ar),
                Data`invalidPointerValue,
                "cr <- nil");
            ActivationRecord`write_local(ar, 1, Data`int2oid(100));
            assertEquals(
                Data`oid2int(ActivationRecord`read_local(ar, 1)),
                100,
                "local(1) = 100"));
    
    test_alloc_ar1 : () ==> ()
    test_alloc_ar1() ==
        let
            ar =
                ActivationRecord`alloc_ar1(
                    Data`invalidPointerValue,
                    Data`int2oid(10),
                    1,
                    0,
                    Data`invalidPointerValue,
                    2)
        in
            (assertEquals(Data`oid2int(ActivationRecord`read_arg(ar, 1)), 10, "arg1 = 10");
            assertEquals(ActivationRecord`read_ret_reg(ar), 1, "r1 <- retvalue");
            assertEquals(ActivationRecord`read_return_ip(ar), 0, "ip <- 0");
            assertEquals(
                ActivationRecord`read_return_cr(ar),
                Data`invalidPointerValue,
                "cr <- nil");
            ActivationRecord`write_local(ar, 1, Data`int2oid(100));
            assertEquals(
                Data`oid2int(ActivationRecord`read_local(ar, 1)),
                100,
                "local(1) = 100"));

end ActivationRecordTest
