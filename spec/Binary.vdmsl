module Binary
exports all
definitions
functions
	/* utility functions for bits */
    mask : nat * nat -> nat
    mask(i, m) ==
        if i = 0 or m = 0 then 0 else mask(i div 2, m div 2)  * 2 + i mod 2  * (m mod 2);
    
    xor : nat * nat -> nat
    xor(i, m) ==
        if i = 0
            then m
        elseif m = 0
            then i
        else
            xor(i div 2, m div 2)  * 2 + (i mod 2 + m mod 2) mod 2;
    
    rshift : nat * nat -> nat
    rshift(i, b) == if b = 0 then i else rshift(i div 2, b - 1);
    
    lshift : nat * nat -> nat
    lshift(i, b) == if b = 0 then i else lshift(i  * 2, b - 1);

end Binary
