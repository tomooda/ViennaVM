module BinaryTest
imports
    from Binary all,
    from UnitTesting all
exports all
definitions
operations
    testAll : () ==> ()
    testAll() ==
        (testMask();
        testXor();
        testRshift();
        testLshift());
    
    testMask : () ==> ()
    testMask() ==
        (for i : nat in [0, 0xa, 0x6, 0x66, 0xaa]
        do
            (for m1 : nat in [0, 0xa, 0x6, 0x66, 0xaa]
            do
                (let
                    m2 : nat = 255 - m1,
                    i1 : nat = Binary`mask(i, m1),
                    i2 : nat = Binary`mask(i, m2)
                in
                    (UnitTesting`assert(i1 <= 255, "no extention of bits");
                    UnitTesting`assert(i2 <= 255, "no extention of bits");
                    UnitTesting`assertEquals(Binary`mask(i1, i2), 0, "zero");
                    UnitTesting`assertEquals(i1 + i2, i, "recovery")))));
    
    testXor : () ==> ()
    testXor() ==
        (for i : nat in [0, 0xa, 0x6, 0x66, 0xaa]
        do
            (for j : nat in [0, 0xa, 0x6, 0x66, 0xaa]
            do UnitTesting`assertEquals(Binary`xor(Binary`xor(i, j), j), i, "recovery");
            UnitTesting`assertEquals(Binary`xor(i, i), 0, "zero"));
        UnitTesting`assertEquals(
            Binary`xor(
                Binary`xor(Binary`xor(0x11223344, 0xaaaaaaaa), 0x55555555),
                0xffffffff),
            0x11223344, "long bits"));
    
    testRshift : () ==> ()
    testRshift() ==
        (UnitTesting`assertEquals(Binary`rshift(0xa, 0), 0xa, "no shift");
        UnitTesting`assertEquals(Binary`rshift(0xa, 1), 0x5, "one shift");
        UnitTesting`assertEquals(Binary`rshift(0xa, 2), 0x2, "two shift");
        UnitTesting`assertEquals(Binary`rshift(0xa, 3), 0x1, "three shift");
        UnitTesting`assertEquals(Binary`rshift(0xa, 4), 0, "four shift"));
    
    testLshift : () ==> ()
    testLshift() ==
        (UnitTesting`assertEquals(Binary`lshift(0xa, 0), 0xa, "no shift");
        UnitTesting`assertEquals(Binary`lshift(0xa, 1), 0x14, "one shift");
        UnitTesting`assertEquals(Binary`lshift(0xa, 2), 0x28, "two shift");
        UnitTesting`assertEquals(Binary`lshift(0xa, 3), 0x50, "three shift");
        UnitTesting`assertEquals(Binary`lshift(0xa, 4), 0xa0, "four shift"));

end BinaryTest
