module CodeRecordTest
imports
    from CodeRecord all,
    from Data all,
    from Register all,
    from Instruction all,
    from UnitTesting operations assertEquals renamed assertEquals;
exports all
definitions
operations
    test_sum_by_loop : () ==> ()
    test_sum_by_loop() ==
        (let
            cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    /* r1: sum, r2: loop variant=1,...,10, r3: stop=10, r4: step=1, r5: jump label, r6: loop condition */
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(0), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(10), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVE, 4, 0, 2, nil, nil),
                    mk_(Instruction`MOVEI, 5, 0, 0, "loop", nil),
                    mk_(Instruction`ADD, 1, 1, 2, nil, "loop"),
                    mk_(Instruction`ADD, 2, 2, 4, nil, nil),
                    mk_(Instruction`LESSTHAN, 6, 3, 2, nil, nil),
                    mk_(Instruction`JUMPFALSE, 6, 5, 0, nil, nil),
                    mk_(Instruction`ERR, 0, 0, 0, nil, nil)])
        in
            (assertEquals(CodeRecord`read_code_size(cr), 14, "code size = 14");
            assertEquals(CodeRecord`read_num_regs(cr), 6, "uses r1-r6");
            assertEquals(CodeRecord`read_argtypes(cr), Data`invalidOidValue, "no argtypes");
            assertEquals(CodeRecord`read_rettype(cr), Data`invalidOidValue, "no rettype");
            Register`write_cr(cr);
            Register`write_ip(0);
            while Register`read_ip() < 13 do Instruction`step();
            assertEquals(Register`read_int(2), 11, "r2 = 11 (just over the stop value=10)");
            assertEquals(Register`read_int(1), 55, "r1 = 55 (sum of 0,...,10)")));
    
    test_sum_by_recursion : () ==> ()
    test_sum_by_recursion() ==
        let
            cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
		    /* r1: 1, i-1, sum(i-1), r2: i */
                    [mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`EQUAL, 3, 1, 2, nil, nil),
                    mk_(Instruction`RETTRUE, 3, 1, 0, nil, nil),
                    mk_(Instruction`MOVE, 3, 0, 1, nil, nil),
                    mk_(Instruction`SUB, 1, 1, 2, nil, nil),
                    mk_(Instruction`CALLREC, 2, 0, 0, nil, nil),
                    mk_(Instruction`ADD, 1, 3, 2, nil, nil),
                    mk_(Instruction`RET, 1, 0, 0, nil, nil)])
        in
            (assertEquals(CodeRecord`read_code_size(cr), 9, "code size = 9");
            assertEquals(CodeRecord`read_num_regs(cr), 3, "uses r1-r3");
            assertEquals(CodeRecord`read_argtypes(cr), Data`invalidOidValue, "no argtypes");
            assertEquals(CodeRecord`read_rettype(cr), Data`invalidOidValue, "no rettype");
            Register`write_cr(Data`invalidPointerValue);
            Register`write_ip(0);
            Register`write_int(1, 10);
            Register`write_pointer(2, cr);
            Instruction`call(1, 2);
            while Register`read_cr() <> Data`invalidPointerValue
            do Instruction`step();
            assertEquals(Register`read_int(1), 55, "r1 = 55 (sum of 0,...,10)"));
    
    test_fibonacci : () ==> ()
    test_fibonacci() ==
        let
            cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
		    /* r1: i, i-1, i-2 r2: 1, sum(i-1) */
                    [mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`LESSTHAN, 3, 2, 1, nil, nil),
                    mk_(Instruction`RETFALSE, 3, 1, 0, nil, nil),
                    mk_(Instruction`SUB, 1, 1, 2, nil, nil),
                    mk_(Instruction`CALLREC, 3, 0, 0, nil, nil),
                    mk_(Instruction`SUB, 1, 1, 2, nil, nil),
                    mk_(Instruction`CALLREC, 1, 0, 0, nil, nil),
                    mk_(Instruction`ADD, 1, 1, 3, nil, nil),
                    mk_(Instruction`RET, 1, 0, 0, nil, nil)])
        in
            (assertEquals(CodeRecord`read_code_size(cr), 10, "code size = 10");
            assertEquals(CodeRecord`read_num_regs(cr), 3, "uses r1-r3");
            assertEquals(CodeRecord`read_argtypes(cr), Data`invalidOidValue, "no argtypes");
            assertEquals(CodeRecord`read_rettype(cr), Data`invalidOidValue, "no rettype");
            Register`write_cr(Data`invalidPointerValue);
            Register`write_ip(0);
            Register`write_int(1, 5);
            Register`write_pointer(2, cr);
            Instruction`call(1, 2);
            while Register`read_cr() <> Data`invalidPointerValue
            do Instruction`step();
            assertEquals(Register`read_int(1), 5, "r1 = 5 (fib(5) = 5"));

end CodeRecordTest
