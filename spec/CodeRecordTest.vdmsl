module CodeRecordTest
imports
    from CodeRecord all,
    from Data all,
    from Register all,
    from Instruction all,
    from UnitTesting operations assertEquals renamed assertEquals;
exports all
definitions
operations
    test_sum_by_loop : () ==> ()
    test_sum_by_loop() ==
        (let
            cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    /* r1: sum, r2: loop variant=1,...,10, r3: stop=10, r4: step=1, r5: jump label, r6: loop condition */
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(0), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(10), nil),
                    mk_(Instruction`MOVEI, 2, 4, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 5, 0, 0, "loop", nil),
                    mk_(Instruction`ADD, 1, 1, 2, nil, "loop"),
                    mk_(Instruction`ADD, 2, 2, 4, nil, nil),
                    mk_(Instruction`LESSTHAN, 6, 3, 2, nil, nil),
                    mk_(Instruction`JUMPFALSE, 6, 5, 0, nil, nil),
                    mk_(Instruction`ERR, 0, 0, 0, nil, nil)])
        in
            (assertEquals(CodeRecord`read_code_size(cr), 13, "code size = 13");
            assertEquals(CodeRecord`read_num_regs(cr), 6, "uses r1-r6");
            assertEquals(CodeRecord`read_argtypes(cr), Data`invalidOidValue, "no argtypes");
            assertEquals(CodeRecord`read_rettype(cr), Data`invalidOidValue, "no rettype");
            Register`write_cr(cr);
            Register`write_ip(0);
            while Register`read_ip() < 12 do Instruction`step();
            assertEquals(Register`read_int(2), 11, "r2 = 11 (just over the stop value=10)");
            assertEquals(Register`read_int(1), 55, "r1 = 55 (sum of 0,...,10)")));

end CodeRecordTest
