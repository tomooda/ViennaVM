module DataTest
imports
    from Data all,
    from Memory all,
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assert renamed assert;
exports all
definitions
operations
    test_real2float_float2real : () ==> ()
    test_real2float_float2real() ==
        (assertEquals(
            Data`real2float(Data`float2real(mk_Data`Float(0, 12, 3456))),
            mk_Data`Float(0, 12, 3456),
            "normalized positive");
        assertEquals(
            Data`real2float(Data`float2real(mk_Data`Float(1, 234, 56789))),
            mk_Data`Float(1, 234, 56789),
            "normalized positive");
        assertEquals(
            Data`real2float(Data`float2real(mk_Data`Float(0, 0, 3456))),
            mk_Data`Float(0, 0, 3456),
            "denormalized positive");
        assertEquals(
            Data`real2float(Data`float2real(mk_Data`Float(1, 0, 1234))),
            mk_Data`Float(1, 0, 1234),
            "denormalized positive");
        assertEquals(Data`float2real(Data`real2float(0)), 0, "zero"));
    
    test_qword2words : () ==> ()
    test_qword2words() ==
        (assertEquals(
            Data`qword2words(0x1122334455667788),
            mk_(0x7788, 0x5566, 0x3344, 0x1122),
            "MSB=0");
        assertEquals(
            Data`qword2words(0xfedcba9876543210),
            mk_(0x3210, 0x7654, 0xba98, 0xfedc),
            "MSB=1"));
    
    test_words2qword : () ==> ()
    test_words2qword() ==
        (assertEquals(
            Data`words2qword(0x0011, 0x2233, 0x4455, 0x6677),
            0x6677445522330011,
            "little endian");
        assertEquals(
            Data`qword2words(Data`words2qword(0x0123, 0x4567, 0x89ab, 0xcdef)),
            mk_(0x0123, 0x4567, 0x89ab, 0xcdef),
            "words->qword->words"));
    
    test_qword2int : () ==> ()
    test_qword2int() ==
        (assertEquals(
            Data`qword2int(0x1234567812345678), 0x1234567812345678, "positive");
        assertEquals(Data`qword2int(0xffffffffffffffff), -1, "negative"));
    
    test_dword2int : () ==> ()
    test_dword2int() ==
        (assertEquals(Data`dword2int(0x12345678), 0x12345678, "positive");
        assertEquals(Data`dword2int(0xffffffff), -1, "negative"));
    
    test_byte2int : () ==> ()
    test_byte2int() ==
        (assertEquals(Data`byte2int(0x12), 0x12, "positive");
        assertEquals(Data`byte2int(0xff), -1, "negative"));
    
    test_oid2int : () ==> ()
    test_oid2int() ==
        (assertEquals(Data`oid2int(Data`int2oid(12)), 12, "trip around");
        assertEquals(
            Data`oid2int(Data`int2oid(0x1122334455667788)),
            0x1122334455667788,
            "64 bits");
        assertEquals(Data`oid2int(Data`int2oid(-12)), -12, "negative");
        assertEquals(
            Data`oid2int(Data`int2oid(-0x1122334455667788)),
            -0x1122334455667788,
            "64 bits negative");
        assertEquals(
            Data`int2oid(0x1122334455667788) mod 0x2,
            Data`smallIntegerTag,
            "tagged smallInt");
        assertEquals(
            Data`int2oid(-0x1122334455667788) mod 0x2,
            Data`smallIntegerTag,
            "negative tagged smallInt");
        assertEquals(
            Data`int2oid(Data`invalidIntValue),
            Data`invalidOidValue,
            "invalid int to invalid OID");
        assertEquals(
            Data`oid2int(Data`invalidOidValue),
            Data`invalidIntValue,
            "invalid OID to invalid int"));
    
    test_oid2float : () ==> ()
    test_oid2float() ==
        (assertEquals(
            Data`oid2float(Data`float2oid(mk_Data`Float(0, 0x12, 0x12345))),
            mk_Data`Float(0, 0x12, 0x12345),
            "trip around");
        assertEquals(
            Data`oid2float(Data`float2oid(mk_Data`Float(1, 0xab, 0x23456))),
            mk_Data`Float(1, 0xab, 0x23456),
            "negative");
        assertEquals(
            Data`float2oid(mk_Data`Float(0, 0x12, 0x12345)) mod 0x100,
            Data`floatTag,
            "tagged float");
        assertEquals(
            Data`float2oid(mk_Data`Float(1, 0xab, 0x23456)) mod 0x100,
            Data`floatTag,
            "negative tagged float");
        assertEquals(
            Data`float2oid(Data`invalidFloatValue),
            Data`invalidOidValue,
            "invalid float to invalid OID");
        assertEquals(
            Data`oid2float(Data`invalidOidValue),
            Data`invalidFloatValue,
            "invalid OID to invalid float"));
    
    test_oid2char : () ==> ()
    test_oid2char() ==
        (assertEquals(Data`oid2char(Data`char2oid(0x1234)), 0x1234, "trip around");
        assertEquals(Data`char2oid(0x1234) mod 0x100, Data`charTag, "tagged char");
        assertEquals(
            Data`char2oid(Data`invalidCharValue),
            Data`invalidOidValue,
            "invalid char to invalid OID");
        assertEquals(
            Data`oid2char(Data`invalidOidValue),
            Data`invalidCharValue,
            "invalid OID to invalid char"));
    
    test_oid2pointer : () ==> ()
    test_oid2pointer() ==
        (assertEquals(
            Data`oid2pointer(Data`pointer2oid(0x12345)), 0x12345, "trip around");
        assertEquals(Data`oid2pointer(0x12345) mod 0x100, 0, "tagged pointer");
        assertEquals(
            Data`oid2pointer(Data`invalidOidValue),
            Data`invalidPointerValue,
            "invalid OID to invalid pointer");
        assertEquals(
            Data`pointer2oid(Data`invalidPointerValue),
            Data`invalidOidValue,
            "invalid pointer to invalid OID"));
    
    test_hash : () ==> ()
    test_hash() ==
        let
            i1 : Data`Int = 123,
            i2 : Data`Int = -321,
            f : Data`Float = Data`real2float(3.14),
            c : Data`Char = 0x41,
            p1 : Data`Pointer = Memory`alloc(3),
            p2 : Data`Pointer = Memory`alloc(3)
        in
            (assertEquals(Data`hash(Data`int2oid(i1)), Data`hashInt(i1), "hash int value");
            assertEquals(
                Data`hash(Data`float2oid(f)), Data`hashFloat(f), "hash float value");
            assertEquals(Data`hash(Data`char2oid(c)), Data`hashChar(c), "hash char value");
            Memory`write_slot(p1, 1, Data`int2oid(i1));
            Memory`write_slot(p1, 2, Data`float2oid(f));
            Memory`write_slot(p1, 3, Data`char2oid(c));
            Memory`write_slot(p2, 1, Data`int2oid(i1));
            Memory`write_slot(p2, 2, Data`float2oid(f));
            Memory`write_slot(p2, 3, Data`char2oid(c));
            assertEquals(
                Data`hash(Data`pointer2oid(p1)),
                Data`hashPointer(p1),
                "hash pointer value");
            assertEquals(
                Data`hash(Data`pointer2oid(p1)),
                Data`hash(Data`pointer2oid(p2)),
                "hash heap objects with the same contents");
            Memory`write_slot(p2, 1, Data`int2oid(i2));
            assert(
                Data`hash(Data`pointer2oid(p1)) <> Data`hash(Data`pointer2oid(p2)),
                "hash heap objects with different contents"));

end DataTest
