module Equality
imports
    from Data all,
    from Memory
        operations
            read_hash;
            write_hash;
            slots_size;
            read_slot;,
    from Seq
        operations
            hash;
            equal;,
    from Tuple
        operations
            hash;
            equal;,
    from Record
        operations
            hash;
            equal;,
    from RecordType
        operations
            hash;
            equal;
exports all
definitions
types
     Hash = Data`Qword;

values
     hashMask = 0xffffffffffffffff;
     invalidHashValue = 0;

operations
    equal : Data`OID * Data`OID ==> bool
    equal(oid1, oid2) ==
        (if oid1 = oid2 then return true;
        if
            Data`isPointer(oid1) and Data`isPointer(oid2)
        then
            let tag1 = oid1 mod 0x100, tag2 = oid2 mod 0x100
            in
                (if tag1 <> tag2 then return false;
                return let p1 = Data`oid2pointer(oid1), p2 = Data`oid2pointer(oid2)
                    in
                        cases tag1:
                            (Data`seqTag) -> Seq`hash(p1) = Seq`hash(p2) and Seq`equal(p1, p2),
                            (Data`tupleTag) ->
                                Tuple`hash(p1) = Tuple`hash(p2) and Tuple`equal(p1, p2),
                            (Data`recordTypeTag) ->
                                RecordType`hash(p1) = RecordType`hash(p2) and RecordType`equal(p1, p2),
                            others -> undefined
                            end);
        if hash(oid1) <> hash(oid2) then return false;
        if Data`isInt(oid1) and Data`isFloat(oid2) then return true;
        if Data`isFloat(oid1) and Data`isInt(oid2) then return true;
        return false);
    
    defaultEqualPointer : Data`Pointer * Data`Pointer ==> bool
    defaultEqualPointer(p1, p2) ==
        (if Memory`slots_size(p1) <> Memory`slots_size(p2) then return false;
        for i = 1 to  Memory`slots_size(p1)
        do
            if
                not equal(Memory`read_slot(p1, i), Memory`read_slot(p2, i))
            then
                return false;
        return true);
    
    hash : Data`OID ==> Hash
    hash(oid) ==
        return if Data`isPointer(oid)
                then (let tag = oid mod 0x100
                    in
                        (let p = Data`oid2pointer(oid)
                            in
                                cases tag:
                                    (Data`seqTag) -> Seq`hash(p),
                                    (Data`setTag) -> undefined,
                                    (Data`mapTag) -> undefined,
                                    (Data`tupleTag) -> Tuple`hash(p),
                                    (Data`recordTag) -> Record`hash(p),
                                    (Data`recordTypeTag) -> RecordType`hash(p),
                                    others -> undefined
                                    end))
            elseif Data`isFloat(oid)
                then hashFloat(Data`oid2float(oid))
            else
                oid mod (hashMask + 1);
    
    pure hashInt : Data`Int ==> Hash
    hashInt(i) == return Data`int2oid(i) mod (hashMask + 1);
    
    pure hashFloat : Data`Float ==> Hash
    hashFloat(f) ==
        let r = Data`float2real(f), i = floor r
        in
            return if r - i = 0.0 then hashInt(i) else Data`float2oid(f) mod (hashMask + 1);
    
    pure hashChar : Data`Char ==> Hash
    hashChar(c) == return Data`char2oid(c) mod (hashMask + 1);
    
    defaultHashPointer : Data`Pointer ==> Hash
    defaultHashPointer(p) ==
        let cachedHash : Equality`Hash = Memory`read_hash(p)
        in
            (if
                cachedHash = Equality`invalidHashValue
            then
                (dcl h:int := 0;
                for i = 1 to  Memory`slots_size(p)
                do
                    let oid = Memory`read_slot(p, i)
                    in if oid <> Data`invalidOidValue then h := h + Equality`hash(oid);
                h := h mod (Equality`hashMask + 1);
                Memory`write_hash(p, h);
                return h)
            else
                return cachedHash);

end Equality
