module Equality
imports
    from Data all,
    from Memory
        operations
            alloc;
            read_hash;
            write_hash;
            slots_size;
            read_slot;
            write_slot;
exports all
definitions
types
     Hash = Data`Qword;
     HashIndex = nat;

values
     hashMask = 0xffffffffffffffff;
     invalidHashValue = 0;
     initialEqualityTableSize = 256;
     initialEqualityTableCapacity = 240;

state State of
    equalityTable : seq of Data`Pointer
    capacity : nat
    numElements : nat
init s ==
    s
    = mk_State(
        [Data`invalidPointerValue
            | p in set {1, ..., initialEqualityTableSize}],
        initialEqualityTableCapacity,
        0)
end

operations
    equal : Data`OID * Data`OID ==> bool
    equal(oid1, oid2) ==
        (if oid1 = oid2 then return true;
        if hash(oid1) <> hash(oid2) then return false;
        if
            Data`isPointer(oid1) and Data`isPointer(oid2)
        then
            let tag1 = oid1 mod 0x100, tag2 = oid2 mod 0x100
            in
                (if tag1 <> tag2 then return false;
                return let p1 = Data`oid2pointer(oid1), p2 = Data`oid2pointer(oid2)
                    in equalPointer(p1, p2));
        if Data`isInt(oid1) and Data`isFloat(oid2) then return true;
        if Data`isFloat(oid1) and Data`isInt(oid2) then return true;
        return false);
    
    equalPointer : Data`Pointer * Data`Pointer ==> bool
    equalPointer(p1, p2) ==
        (if Memory`slots_size(p1) <> Memory`slots_size(p2) then return false;
        for i = 1 to  Memory`slots_size(p1)
        do
            if
                not equal(Memory`read_slot(p1, i), Memory`read_slot(p2, i))
            then
                return false;
        return true);
    
    hash : Data`OID ==> Hash
    hash(oid) ==
        return if Data`isPointer(oid)
                then hashPointer(Data`oid2pointer(oid))
            elseif Data`isFloat(oid)
                then hashFloat(Data`oid2float(oid))
            else
                oid mod (hashMask + 1);
    
    pure hashInt : Data`Int ==> Hash
    hashInt(i) == return Data`int2oid(i) mod (hashMask + 1);
    
    pure hashFloat : Data`Float ==> Hash
    hashFloat(f) ==
        let r = Data`float2real(f), i = floor r
        in
            return if r - i = 0.0 then hashInt(i) else Data`float2oid(f) mod (hashMask + 1);
    
    pure hashChar : Data`Char ==> Hash
    hashChar(c) == return Data`char2oid(c) mod (hashMask + 1);
    
    hashPointer : Data`Pointer ==> Hash
    hashPointer(p) ==
        let cachedHash : Hash = Memory`read_hash(p)
        in
            (if
                cachedHash = invalidHashValue
            then
                (dcl h:int := 0;
                for i = 1 to  Memory`slots_size(p)
                do
                    let oid = Memory`read_slot(p, i)
                    in if oid <> Data`invalidOidValue then h := h + hash(oid);
                h := h mod (hashMask + 1);
                Memory`write_hash(p, h);
                return h)
            else
                return cachedHash);
    
    setEqualityTable : seq of Data`Pointer ==> ()
    setEqualityTable(newTable) == equalityTable := newTable;
    
    getEqualityTable : () ==> seq of Data`Pointer
    getEqualityTable() == return equalityTable;
    
    setCapacity : nat ==> ()
    setCapacity(newCapacity) == capacity := newCapacity;
    
    getCapacity : () ==> nat
    getCapacity() == return capacity;
    
    setNumElements : nat ==> ()
    setNumElements(newNumElements) == numElements := newNumElements;
    
    findIndex : Data`Pointer ==> [HashIndex]
    findIndex(pointer) ==
        (dcl
            hashValue:Hash := hashPointer(pointer),
            index:HashIndex := hashValue mod capacity;
        for distance = 0 to  len equalityTable - capacity - 1
        do
            let p : Data`Pointer = equalityTable(index + 1)
            in
                (if
                    p = Data`invalidPointerValue
                then
                    return index
                else
                    let h : Hash = hashPointer(p), d : nat = index - h mod capacity
                    in
                        (if hashValue = h and equalPointer(pointer, p) then return index;
                        if
                            distance > d or distance = d and pointer < p
                        then
                            (dcl
                                hand:Data`Pointer := equalityTable(index + 1),
                                i:HashIndex := index + 1;
                            equalityTable(index + 1) := Data`invalidPointerValue;
                            while hand <> Data`invalidPointerValue
                            do
                                (dcl t:Data`Pointer := equalityTable(i + 1);
                                equalityTable(i + 1) := hand;
                                hand := t;
                                i := i + 1);
                            return index);
                        index := index + 1));
        return nil);
    
    basicResize : nat * nat ==> bool
    basicResize(newSize, newCapacity) ==
        let
            oldTable : seq of Data`Pointer = equalityTable,
            oldCapacity : nat = capacity
        in
            (equalityTable
                := [Data`invalidPointerValue | i in set {1, ..., newSize}];
            capacity := newCapacity;
            for i = 1 to  len oldTable
            do
                let pointer : Data`Pointer = oldTable(i)
                in
                    if
                        pointer <> Data`invalidPointerValue
                    then
                        let index : [HashIndex] = findIndex(pointer)
                        in
                            (if
                                index = nil
                            then
                                (equalityTable := oldTable;
                                capacity := oldCapacity;
                                return false);
                            equalityTable(index + 1) := pointer);
            return true);
    
    growEqualityTable : () ==> ()
    growEqualityTable() ==
        (dcl newCapacity:nat := capacity  * 3 div 2;
        while not basicResize(newCapacity + 64, newCapacity)
        do newCapacity := newCapacity  * 3 div 2);
    
    findOrAdd : Data`Pointer ==> Data`Pointer
    findOrAdd(pointer) ==
        (dcl index:[HashIndex] := findIndex(pointer);
        while index = nil
        do
            (growEqualityTable();
            index := findIndex(pointer));
        let p : Data`Pointer = equalityTable(index + 1)
        in
            if
                p = Data`invalidPointerValue
            then
                (equalityTable(index + 1) := pointer;
                return pointer)
            else
                return p);
    
    remove : Data`Pointer ==> ()
    remove(pointer) ==
        (dcl
            hashValue:Hash := hashPointer(pointer),
            index:HashIndex := hashValue mod capacity;
        for distance = 0 to  len equalityTable - capacity - 1
        do
            let p : Data`Pointer = equalityTable(index + 1)
            in
                (if p = Data`invalidPointerValue
                    then return 
                elseif pointer = p
                    then (dcl i:HashIndex := index;
                    while
                        let p0 : Data`Pointer = equalityTable(i + 2)
                        in
                            p0 <> Data`invalidPointerValue and hashPointer(p0) mod capacity <= i
                    do
                        (equalityTable(i + 1) := equalityTable(i + 2);
                        i := i + 1);
                    equalityTable(i + 1) := Data`invalidPointerValue)
                else
                    let d : nat = index - hashPointer(p) mod capacity
                    in
                        (if distance > d or distance = d and pointer < p then return ;
                        index := index + 1));
        return );

end Equality
