module EqualityTest
imports
    from Equality all,
    from Data all,
    from Memory all,
    from Seq all,
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assert renamed assert;
exports all
definitions
operations
    test_equal_int : () ==> ()
    test_equal_int() ==
        (assert(Equality`equal(Data`int2oid(1), Data`int2oid(1)), "1 = 1");
        assert(not Equality`equal(Data`int2oid(1), Data`int2oid(-1)), "1 = -1");
        assert(
            Equality`equal(
                Data`int2oid(1), Data`float2oid(Data`real2float(1.0))),
            "1 = 1.0");
        assert(
            not Equality`equal(
                Data`int2oid(1), Data`float2oid(Data`real2float(-1.0))),
            "1 = -1.0");
        assert(
            not Equality`equal(Data`int2oid(1), Data`char2oid(1)),
            "1 = char(1)");
        assert(
            not Equality`equal(Data`int2oid(1), Data`pointer2oid(1)),
            "1 = Pointer(1)"));
    
    test_equal_float : () ==> ()
    test_equal_float() ==
        let
            f1 : Data`Float = Data`real2float(1.0),
            f2 : Data`Float = Data`real2float(-1.0)
        in
            (assert(
                Equality`equal(Data`float2oid(f1), Data`float2oid(f1)), "1.0 = 1.0");
            assert(
                not Equality`equal(Data`float2oid(f1), Data`float2oid(f2)),
                "10 = -1.0");
            assert(Equality`equal(Data`float2oid(f1), Data`int2oid(1)), "1.0 = 1");
            assert(
                not Equality`equal(Data`float2oid(f1), Data`int2oid(-1)),
                "1.0 = -1");
            assert(
                not Equality`equal(Data`float2oid(f1), Data`char2oid(1)),
                "1.0 = 'char(1)'");
            assert(
                not Equality`equal(Data`float2oid(f1), Data`pointer2oid(1)),
                "1.0 = Pointer(1)"));
    
    test_equal_char : () ==> ()
    test_equal_char() ==
        (assert(
            Equality`equal(Data`char2oid(1), Data`char2oid(1)),
            "char(1) = char(1)");
        assert(
            not Equality`equal(Data`char2oid(1), Data`char2oid(2)),
            "char(1) = char(2)");
        assert(
            not Equality`equal(Data`char2oid(1), Data`int2oid(1)),
            "char(1) = 1");
        assert(
            not Equality`equal(
                Data`char2oid(1), Data`float2oid(Data`real2float(1.0))),
            "char(1) = 1.0");
        assert(
            not Equality`equal(Data`char2oid(1), Data`pointer2oid(1)),
            "char(1) = Pointer(1)"));
    
    test_equal_pointer : () ==> ()
    test_equal_pointer() ==
        let p1 : Data`Pointer = Memory`alloc(1)
        in
            (Memory`write_slot(p1, 1, Data`int2oid(1));
            assert(
                Equality`equal(Data`pointer2oid(p1), Data`pointer2oid(p1)),
                "pointer([1]) = pointer([1])");
            assert(
                not Equality`equal(Data`pointer2oid(1), Data`int2oid(1)),
                "pointer(1) = 1");
            assert(
                not Equality`equal(
                    Data`pointer2oid(1), Data`float2oid(Data`real2float(1.0))),
                "pointer(1) = 1.0");
            assert(
                not Equality`equal(Data`pointer2oid(1), Data`char2oid(1)),
                "pointer(1) = char(1)"));
    
    test_hash : () ==> ()
    test_hash() ==
        let
            i1 : Data`Int = 123,
            i2 : Data`Int = -321,
            f : Data`Float = Data`real2float(3.14),
            c : Data`Char = 0x41,
            p1 : Data`Pointer = Seq`alloc(3),
            p2 : Data`Pointer = Seq`alloc(3)
        in
            (assertEquals(
                Equality`hash(Data`int2oid(i1)),
                Equality`hashInt(i1),
                "hash int value");
            assertEquals(
                Equality`hash(Data`float2oid(f)),
                Equality`hashFloat(f),
                "hash float value");
            assertEquals(
                Equality`hash(Data`float2oid(Data`real2float(1.0))),
                Equality`hash(Data`int2oid(1)),
                "hash(1) and hash(1.0)");
            assertEquals(
                Equality`hash(Data`char2oid(c)),
                Equality`hashChar(c),
                "hash char value");
            Memory`write_slot(p1, 1, Data`int2oid(i1));
            Memory`write_slot(p1, 2, Data`float2oid(f));
            Memory`write_slot(p1, 3, Data`char2oid(c));
            Memory`write_slot(p2, 1, Data`int2oid(i1));
            Memory`write_slot(p2, 2, Data`float2oid(f));
            Memory`write_slot(p2, 3, Data`char2oid(c));
            assertEquals(
                Equality`hashPointer(p1),
                Equality`hashPointer(p2),
                "hashPointer pointers to the same contents");
            assertEquals(
                Equality`hash(Data`pointer2oid(p1)),
                Equality`hash(Data`pointer2oid(p2)),
                "hash heap objects with the same contents");
            Memory`write_slot(p2, 1, Data`int2oid(i2));
            assert(
                Equality`hash(Data`pointer2oid(p1))
                <> Equality`hash(Data`pointer2oid(p2)),
                "hash heap objects with different contents"));
    
    testFindIndex_withEmptyTable : () ==> ()
    testFindIndex_withEmptyTable() ==
        let
            p : Data`Pointer = Memory`alloc(1),
            n : Data`Pointer = Data`invalidPointerValue
        in
            (dcl table:seq of Data`Pointer := [n, n, n, n, n, n, n, n, n, n, n, n];
            Memory`write_slot(p, 1, Data`int2oid(1));
            assertEquals(Equality`hashPointer(p) mod 10, 3, "hashPointer");
            Equality`setEqualityTable(table);
            Equality`setCapacity(10);
            Equality`setNumElements(0);
            assertEquals(
                Equality`findIndex(p),
                3, -- Equality`hashPointer(p) mod 10,
                "findIndex on an empty table should not have any conflict");
            assertEquals(
                Equality`getEqualityTable(), table, "equality table does not change"));
    
    testFindIndex_withExistingElementNoConflict : () ==> ()
    testFindIndex_withExistingElementNoConflict() ==
        let
            p : Data`Pointer = Memory`alloc(1),
            n : Data`Pointer = Data`invalidPointerValue
        in
            (dcl
                table:seq of Data`Pointer := [n, n, n, p, n, n, n, n, n, n, n, n, n];
            Memory`write_slot(p, 1, Data`int2oid(1));
            assertEquals(Equality`hashPointer(p) mod 10, 3, "hashPointer");
            Equality`setEqualityTable(table);
            Equality`setCapacity(10);
            Equality`setNumElements(0);
            assertEquals(
                Equality`findIndex(p),
                3, -- Equality`hashPointer(p) mod 10,
                "findIndex on existing element without hash conflict");
            assertEquals(
                Equality`getEqualityTable(), table, "equality table does not change"));
    
    testFindIndex_withNewElementWithConflict : () ==> ()
    testFindIndex_withNewElementWithConflict() ==
        let
            p1 : Data`Pointer = Memory`alloc(1),
            p6 : Data`Pointer = Memory`alloc(1),
            n : Data`Pointer = Data`invalidPointerValue
        in
            (dcl
                table:seq of Data`Pointer := [n, n, n, p1, n, n, n, n, n, n, n, n, n];
            Memory`write_slot(p1, 1, Data`int2oid(1));
            assertEquals(Equality`hashPointer(p1) mod 10, 3, "hashPointer with [1]");
            Memory`write_slot(p6, 1, Data`int2oid(6));
            assertEquals(Equality`hashPointer(p6) mod 10, 3, "hashPointer with [6]");
            Equality`setEqualityTable(table);
            Equality`setCapacity(10);
            Equality`setNumElements(0);
            assertEquals(
                Equality`findIndex(p6),
                4, -- Equality`hashPointer(p6) mod 10 + 1,
                "findIndex on a new element with hash conflict.");
            assertEquals(
                Equality`getEqualityTable(), table, "equality table does not change"));
    
    testFindIndex_withNewElementWith2Conflicts : () ==> ()
    testFindIndex_withNewElementWith2Conflicts() ==
        let
            p1 : Data`Pointer = Memory`alloc(1),
            p2 : Data`Pointer = Memory`alloc(1),
            p6 : Data`Pointer = Memory`alloc(1),
            n : Data`Pointer = Data`invalidPointerValue
        in
            (dcl
                table:seq of Data`Pointer := [n, n, n, p1, p1, p2, n, n, n, n, n, n, n];
            Memory`write_slot(p1, 1, Data`int2oid(1));
            assertEquals(Equality`hashPointer(p1) mod 10, 3, "hashPointer with [1]");
            Memory`write_slot(p2, 1, Data`int2oid(2));
            assertEquals(Equality`hashPointer(p2) mod 10, 5, "hashPointer with [2]");
            Memory`write_slot(p6, 1, Data`int2oid(6));
            assertEquals(Equality`hashPointer(p6) mod 10, 3, "hashPointer with [6]");
            Equality`setEqualityTable(table);
            Equality`setCapacity(10);
            Equality`setNumElements(0);
            assertEquals(
                Equality`findIndex(p6),
                5, -- Equality`hashPointer(p6) mod 10 + 1,
                "findIndex on a new element with hash conflict.");
            assertEquals(
                Equality`getEqualityTable(),
                [n, n, n, p1, p1, n, p2, n, n, n, n, n, n],
                "inserted before p2"));
    
    testBasicResize : () ==> ()
    testBasicResize() ==
        let
            ps : seq of Data`Pointer =
                [Memory`alloc(1) | i in set {1, ..., 10}],
            n : Data`Pointer = Data`invalidPointerValue
        in
            (dcl
                table:seq of Data`Pointer := [n, ps(5), ps(10), ps(1), ps(6), ps(2), ps(7), ps(3), ps(8), ps(4),
                ps(9), n, n, n];
            for i = 1 to  10 do Memory`write_slot(ps(i), 1, Data`int2oid(i));
            Equality`setEqualityTable(table);
            Equality`setCapacity(10);
            assert(
                Equality`basicResize(24, 20),
                "resize to larger size must always succeed");
            assert(
                Equality`basicResize(14, 10),
                "resize to the original size must always succeed, too");
            assertEquals(
                Equality`getEqualityTable(),
                table,
                "resized to the original size must reproduce the same table");
            assert(
                not Equality`basicResize(9, 5),
                "resize to too small size must fail"));

end EqualityTest
