module Instruction
imports
    from Data all,
    from Memory all,
    from Register all,
    from ActivationRecord all,
    from CodeRecord all
exports all
definitions
values
     ERR = 0x0000;
     NOP = 0x0001;
     ALLOC = 0x0002;
     RESET = 0x0010;
     MOVE = 0x0011;
     MOVEI = 0x0012;
     LOAD = 0x0020;
     LOAD1 = 0x0021;
     LOAD2 = 0x0022;
     LOAD3 = 0x0023;
     LOAD4 = 0x0024;
     LOAD5 = 0x0025;
     LOAD6 = 0x0026;
     LOAD7 = 0x0027;
     STORE = 0x0028;
     STORE1 = 0x0029;
     STORE2 = 0x002a;
     STORE3 = 0x002b;
     STORE4 = 0x002c;
     STORE5 = 0x002d;
     STORE6 = 0x002e;
     STORE7 = 0x002f;
     ADD = 0x00030;
     SUB = 0x0031;
     MUL = 0x0032;
     IDIV = 0x0033;
     IMOD = 0x0034;
     EQUAL = 0x0050;
     LESSTHAN = 0x0051;
     NOT = 0x0060;
     JUMP = 0x0070;
     JUMPTRUE = 0x0071;
     JUMPFALSE = 0x0072;
     CALL = 0x0080;
     CALLREC = 0x0083;
     RET = 0x0088;
     RETTRUE = 0x0089;
     RETFALSE = 0x008a;

operations
    step : () ==> ()
    step() ==
        let i = Data`oid2int(fetch())
        in
            if
                i <> Data`invalidIntValue
            then
                let
                    code = Data`int2qword(i),
                    mk_(opcode, reg1, reg2, reg3) = Data`qword2words(code)
                in
                    (cases opcode:
                        (ERR) ->
                            (exit Register`read_ip() - 1;
                            err("error instruction invoked")),
                        (NOP) -> nop(),
                        (ALLOC) -> alloc(reg1, reg2),
                        (RESET) -> reset(reg1),
                        (MOVE) -> move(reg1, reg2),
                        (MOVEI) -> movei(reg1, fetch()),
                        (LOAD) -> load(reg1, reg2, reg3),
                        (LOAD1) -> load1(reg1, reg2, reg3),
                        (LOAD2) -> load2(reg1, reg2, reg3),
                        (LOAD3) -> load3(reg1, reg2, reg3),
                        (LOAD4) -> load4(reg1, reg2, reg3),
                        (LOAD5) -> load5(reg1, reg2, reg3),
                        (LOAD6) -> load6(reg1, reg2, reg3),
                        (LOAD7) -> load7(reg1, reg2, reg3),
                        (STORE) -> store(reg1, reg2, reg3),
                        (STORE1) -> store1(reg1, reg2, reg3),
                        (STORE2) -> store2(reg1, reg2, reg3),
                        (STORE3) -> store3(reg1, reg2, reg3),
                        (STORE4) -> store4(reg1, reg2, reg3),
                        (STORE5) -> store5(reg1, reg2, reg3),
                        (STORE6) -> store6(reg1, reg2, reg3),
                        (STORE7) -> store7(reg1, reg2, reg3),
                        (ADD) -> add(reg1, reg2, reg3),
                        (SUB) -> sub(reg1, reg2, reg3),
                        (MUL) -> mul(reg1, reg2, reg3),
                        (IDIV) -> idiv(reg1, reg2, reg3),
                        (IMOD) -> imod(reg1, reg2, reg3),
                        (LESSTHAN) -> lessthan(reg1, reg2, reg3),
                        (EQUAL) -> equal(reg1, reg2, reg3),
                        (NOT) -> bnot(reg1, reg2),
                        (JUMP) -> jump(reg1),
                        (JUMPTRUE) -> jumptrue(reg1, reg2),
                        (JUMPFALSE) -> jumpfalse(reg1, reg2),
                        (CALL) -> call(reg1, reg2),
                        (CALLREC) -> callrec(reg1),
                        (RET) -> ret(reg1),
                        (RETTRUE) -> rettrue(reg1, reg2),
                        (RETFALSE) -> retfalse(reg1, reg2),
                        others -> err("decode error: unknown instruction")
                        end)
            else
                err("decoder error: instruction is not integer");
    
    fetch : () ==> Data`OID
    fetch() ==
        let ip = Register`read_ip(), cr = Register`read_cr()
        in
            (Register`write_ip(ip + 1);
            if
                ip >= 0 and ip < CodeRecord`read_code_size(cr)
            then
                return CodeRecord`read_code(cr, ip)
            else
                (err("fetch error: ip out of bounds");
                return Data`invalidOidValue));
    
    err : seq of char ==> ()
    err(msg) == exit msg;
    
    nop : () ==> ()
    nop() == skip;
    
    alloc : Register`Register * Register`Register ==> ()
    alloc(dst, intReg) ==
        let size = Register`read_int(intReg)
        in
            if
                size <> Data`invalidIntValue
            then
                let p = Memory`alloc(size)
                in
                    if
                        p <> Data`invalidPointerValue
                    then
                        Register`write_pointer(dst, p)
                    else
                        err("alloc instruction error: allocator returned invalid pointer")
            else
                err("alloc instruction error: size is not integer")
    post 
        Register`read_pointer(dst) <> Data`invalidPointerValue
        and Memory`read_reference_count(Register`read_pointer(dst)) = 1;
    
    reset : Register`Register ==> ()
    reset(dst) == Register`write_oid(dst, Data`invalidOidValue);
    
    move : Register`Register * Register`Register ==> ()
    move(dst, src) ==
        if
            src > 0
        then
            Register`move(dst, src)
        else
            err("move instruction error: src register not specified");
    
    movei : Register`Register * Data`OID ==> ()
    movei(dst, imm) ==
        if
            dst > 0
        then
            Register`write_oid(dst, imm)
        else
            err("movei instruction error: operand not specified");
    
    loadi : Register`Register * Register`Register * Register`Register * int ==> ()
    loadi(dst, src, intReg, offset) ==
        if
            dst > 0 and src > 0
        then
            let
                pointer = Register`read_pointer(src),
                slot =
                    if intReg > 0 then Register`read_int(intReg) else 0 + offset
            in
                if
                    Memory`slots_size(pointer) >= slot
                then
                    Register`write_oid(dst, Memory`read_slot(pointer, slot))
                else
                    err("load instruction error: index out of bounds")
        else
            err("load instruction error: operands not specified");
    
    load : Register`Register * Register`Register * Register`Register ==> ()
    load(dst, src, intReg) == loadi(dst, src, intReg, 0);
    
    load1 : Register`Register * Register`Register * Register`Register ==> ()
    load1(dst, src, intReg) == loadi(dst, src, intReg, 1);
    
    load2 : Register`Register * Register`Register * Register`Register ==> ()
    load2(dst, src, intReg) == loadi(dst, src, intReg, 2);
    
    load3 : Register`Register * Register`Register * Register`Register ==> ()
    load3(dst, src, intReg) == loadi(dst, src, intReg, 3);
    
    load4 : Register`Register * Register`Register * Register`Register ==> ()
    load4(dst, src, intReg) == loadi(dst, src, intReg, 4);
    
    load5 : Register`Register * Register`Register * Register`Register ==> ()
    load5(dst, src, intReg) == loadi(dst, src, intReg, 5);
    
    load6 : Register`Register * Register`Register * Register`Register ==> ()
    load6(dst, src, intReg) == loadi(dst, src, intReg, 6);
    
    load7 : Register`Register * Register`Register * Register`Register ==> ()
    load7(dst, src, intReg) == loadi(dst, src, intReg, 7);
    
    storei : Register`Register * Register`Register * Register`Register * int ==> ()
    storei(dst, intReg, src, offset) ==
        if
            dst > 0 and src > 0
        then
            let
                pointer = Register`read_pointer(dst),
                slot =
                    if intReg > 0 then Register`read_int(intReg) else 0 + offset
            in
                if
                    Memory`slots_size(pointer) >= slot
                then
                    Memory`write_slot(pointer, slot, Register`read_oid(src))
                else
                    err("store instruction error: index out of bounds")
        else
            err("store instruction error: operands not specified");
    
    store : Register`Register * Register`Register * Register`Register ==> ()
    store(dst, intReg, src) == storei(dst, intReg, src, 0);
    
    store1 : Register`Register * Register`Register * Register`Register ==> ()
    store1(dst, intReg, src) == storei(dst, intReg, src, 1);
    
    store2 : Register`Register * Register`Register * Register`Register ==> ()
    store2(dst, intReg, src) == storei(dst, intReg, src, 2);
    
    store3 : Register`Register * Register`Register * Register`Register ==> ()
    store3(dst, intReg, src) == storei(dst, intReg, src, 3);
    
    store4 : Register`Register * Register`Register * Register`Register ==> ()
    store4(dst, intReg, src) == storei(dst, intReg, src, 4);
    
    store5 : Register`Register * Register`Register * Register`Register ==> ()
    store5(dst, intReg, src) == storei(dst, intReg, src, 5);
    
    store6 : Register`Register * Register`Register * Register`Register ==> ()
    store6(dst, intReg, src) == storei(dst, intReg, src, 6);
    
    store7 : Register`Register * Register`Register * Register`Register ==> ()
    store7(dst, intReg, src) == storei(dst, intReg, src, 7);
    
    add : Register`Register * Register`Register * Register`Register ==> ()
    add(dst, src1, src2) ==
        if
            (dst > 0 and src1 > 0) and src2 > 0
        then
            let
                int1 = Register`read_int(src1),
                num1 : [real] =
                    if
                        int1 <> Data`invalidIntValue
                    then
                        int1
                    else
                        (let float1 = Register`read_float(src1)
                            in
                                (if float1 <> Data`invalidFloatValue then Data`float2real(float1) else nil)),
                int2 = Register`read_int(src2),
                num2 : [real] =
                    if
                        int2 <> Data`invalidIntValue
                    then
                        int2
                    else
                        (let float2 = Register`read_float(src2)
                            in
                                (if float2 <> Data`invalidFloatValue then Data`float2real(float2) else nil))
            in
                if
                    num1 <> nil and num2 <> nil
                then
                    let num3 : real = num1 + num2
                    in
                        if
                            int1 <> Data`invalidIntValue and int2 <> Data`invalidIntValue
                        then
                            Register`write_int(dst, num3)
                        else
                            Register`write_float(dst, Data`real2float(num3))
                else
                    err("add instruction error: arithmetic error")
        else
            err("add instruction error: operands not specified");
    
    sub : Register`Register * Register`Register * Register`Register ==> ()
    sub(dst, src1, src2) ==
        if
            (dst > 0 and src1 > 0) and src2 > 0
        then
            let
                int1 = Register`read_int(src1),
                num1 : [real] =
                    if
                        int1 <> Data`invalidIntValue
                    then
                        int1
                    else
                        (let float1 = Register`read_float(src1)
                            in
                                (if float1 <> Data`invalidFloatValue then Data`float2real(float1) else nil)),
                int2 = Register`read_int(src2),
                num2 : [real] =
                    if
                        int2 <> Data`invalidIntValue
                    then
                        int2
                    else
                        (let float2 = Register`read_float(src2)
                            in
                                (if float2 <> Data`invalidFloatValue then Data`float2real(float2) else nil))
            in
                if
                    num1 <> nil and num2 <> nil
                then
                    let num3 : real = num1 - num2
                    in
                        if
                            int1 <> Data`invalidIntValue and int2 <> Data`invalidIntValue
                        then
                            Register`write_int(dst, num3)
                        else
                            Register`write_float(dst, Data`real2float(num3))
                else
                    err("sub instruction error: operands not integer")
        else
            err("sub instruction error: operands not specified");
    
    mul : Register`Register * Register`Register * Register`Register ==> ()
    mul(dst, src1, src2) ==
        if
            (dst > 0 and src1 > 0) and src2 > 0
        then
            let
                int1 = Register`read_int(src1),
                num1 : [real] =
                    if
                        int1 <> Data`invalidIntValue
                    then
                        int1
                    else
                        (let float1 = Register`read_float(src1)
                            in
                                (if float1 <> Data`invalidFloatValue then Data`float2real(float1) else nil)),
                int2 = Register`read_int(src2),
                num2 : [real] =
                    if
                        int2 <> Data`invalidIntValue
                    then
                        int2
                    else
                        (let float2 = Register`read_float(src2)
                            in
                                (if float2 <> Data`invalidFloatValue then Data`float2real(float2) else nil))
            in
                if
                    num1 <> nil and num2 <> nil
                then
                    let num3 : real = num1  * num2
                    in
                        if
                            int1 <> Data`invalidIntValue and int2 <> Data`invalidIntValue
                        then
                            Register`write_int(dst, num3)
                        else
                            Register`write_float(dst, Data`real2float(num3))
                else
                    err("mul instruction error: operands not integer")
        else
            err("mul instruction error: operands not specified");
    
    fdiv : Register`Register * Register`Register * Register`Register ==> ()
    fdiv(dst, src1, src2) ==
        if
            (dst > 0 and src1 > 0) and src2 > 0
        then
            let
                num1 : [real] =
                    let float1 = Register`read_float(src1)
                    in
                        (if float1 <> Data`invalidFloatValue then Data`float2real(float1) else nil),
                num2 : [real] =
                    let float2 = Register`read_float(src2)
                    in
                        (if float2 <> Data`invalidFloatValue then Data`float2real(float2) else nil)
            in
                if
                    (num1 <> nil and num2 <> nil) and num2 <> 0
                then
                    Register`write_float(dst, Data`real2float(num1 / num2))
                else
                    err("fdiv instruction error: operands not number")
        else
            err("fdiv instruction error: operands not specified");
    
    idiv : Register`Register * Register`Register * Register`Register ==> ()
    idiv(dst, src1, src2) ==
        if
            (dst > 0 and src1 > 0) and src2 > 0
        then
            let
                int1 : Data`Int = Register`read_int(src1),
                int2 : Data`Int = Register`read_int(src2)
            in
                if
                    int1 <> Data`invalidIntValue and int2 <> Data`invalidIntValue
                then
                    Register`write_int(dst, int1 div int2)
                else
                    err("idiv instruction error: operands not integer")
        else
            err("idiv instruction error: operands not specified");
    
    imod : Register`Register * Register`Register * Register`Register ==> ()
    imod(dst, src1, src2) ==
        if
            (dst > 0 and src1 > 0) and src2 > 0
        then
            let
                int1 : Data`Int = Register`read_int(src1),
                int2 : Data`Int = Register`read_int(src2)
            in
                if
                    (int1 <> Data`invalidIntValue and int2 <> Data`invalidIntValue)
                    and dst > 0
                then
                    Register`write_int(dst, int1 mod int2)
                else
                    err("imod instruction error: operands not integer")
        else
            err("imod instruction error: operands not specified");
    
    lessthan : Register`Register * Register`Register * Register`Register ==> ()
    lessthan(dst, src1, src2) ==
        if
            (dst > 0 and src1 > 0) and src2 > 0
        then
            let
                int1 = Register`read_int(src1),
                num1 : [real] =
                    if
                        int1 <> Data`invalidIntValue
                    then
                        int1
                    else
                        (let float1 = Register`read_float(src1)
                            in
                                (if float1 <> Data`invalidFloatValue then Data`float2real(float1) else nil)),
                int2 = Register`read_int(src2),
                num2 : [real] =
                    if
                        int2 <> Data`invalidIntValue
                    then
                        int2
                    else
                        (let float2 = Register`read_float(src2)
                            in
                                (if float2 <> Data`invalidFloatValue then Data`float2real(float2) else nil))
            in
                if
                    num1 <> nil and num2 <> nil
                then
                    Register`write_oid(dst, if num1 < num2 then Data`trueValue else Data`falseValue)
                else
                    err("lessthan instruction error: operands not integer")
        else
            err("lessthan instruction error: operands not specified");
    
    equal : Register`Register * Register`Register * Register`Register ==> ()
    equal(dst, src1, src2) ==
        if
            (dst > 0 and src1 > 0) and src2 > 0
        then
            let
                int1 = Register`read_int(src1),
                num1 : [real] =
                    if
                        int1 <> Data`invalidIntValue
                    then
                        int1
                    else
                        (let float1 = Register`read_float(src1)
                            in
                                (if float1 <> Data`invalidFloatValue then Data`float2real(float1) else nil)),
                int2 = Register`read_int(src2),
                num2 : [real] =
                    if
                        int2 <> Data`invalidIntValue
                    then
                        int2
                    else
                        (let float2 = Register`read_float(src2)
                            in
                                (if float2 <> Data`invalidFloatValue then Data`float2real(float2) else nil))
            in
                if
                    num1 <> nil and num2 <> nil
                then
                    Register`write_oid(dst, if num1 = num2 then Data`trueValue else Data`falseValue)
                else
                    err("equal instruction error: operands not number")
        else
            err("equal instruction error: operands not specified");
    
    bnot : Register`Register * Register`Register ==> ()
    bnot(dst, src) ==
        if
            dst > 0 and src > 0
        then
            cases Register`read_oid(src):
                (Data`trueValue) -> Register`write_oid(dst, Data`falseValue),
                (Data`falseValue) -> Register`write_oid(dst, Data`trueValue),
                others -> err("not instruction error: 2nd operand not boolean")
                end
        else
            err("not instruction error: operands not specified");
    
    jump : Register`Register ==> ()
    jump(offset) == Register`offset_ip(Data`word2int(offset));
    
    jumptrue : Register`Register * Register`Register ==> ()
    jumptrue(boolReg, offset) ==
        if
            boolReg > 0
        then
            let b = Register`read_oid(boolReg)
            in
                cases b:
                    (Data`trueValue) -> Register`offset_ip(Data`word2int(offset)),
                    (Data`falseValue) -> skip,
                    others -> err("jumptrue instruction error: operand not boolean")
                    end
        else
            err("jumptrue instruction error: operands not specified");
    
    jumpfalse : Register`Register * Register`Register ==> ()
    jumpfalse(boolReg, offset) ==
        if
            boolReg > 0
        then
            let b = Register`read_oid(boolReg)
            in
                cases b:
                    (Data`trueValue) -> skip,
                    (Data`falseValue) -> Register`offset_ip(Data`word2int(offset)),
                    others -> err("jumpfalse instruction error: operand not boolean")
                    end
        else
            err("jumpfalse instruction error: operands not specified");
    
    call : Register`Register * Register`Register ==> ()
    call(dst, crPointerReg) ==
        if
            crPointerReg > 0
        then
            let
                cr = Register`read_pointer(crPointerReg),
                caller_cr = Register`read_cr()
            in
                if
                    cr <> Data`invalidPointerValue
                then
                    let
                        ar =
                            ActivationRecord`alloc_ar(
                                Register`read_ar(), dst, Register`read_ip(), Register`read_cr(), 0)
                    in
                        (Register`write_ar(ar);
                        Register`write_cr(cr);
                        if
                            caller_cr <> Data`invalidPointerValue
                        then
                            Register`offset_registers(CodeRecord`read_num_regs(caller_cr)))
                else
                    err("call instruction error: second operand not pointer")
        else
            err("call instruction error: operands not specified");
    
    callrec : Register`Register ==> ()
    callrec(dst) ==
        let
            cr = Register`read_cr(),
            ar =
                ActivationRecord`alloc_ar(
                    Register`read_ar(), dst, Register`read_ip(), cr, 0)
        in
            (Register`write_ar(ar);
            Register`write_ip(0);
            Register`offset_registers(CodeRecord`read_num_regs(cr)));
    
    ret : Register`Register ==> ()
    ret(src) ==
        let ar = Register`read_ar(), cr = Register`read_cr()
        in
            if
                ar <> Data`invalidPointerValue and cr <> Data`invalidPointerValue
            then
                let
                    num_regs = CodeRecord`read_num_regs(cr),
                    ret_ar = ActivationRecord`read_dynamic_link(ar),
                    ret_cr = ActivationRecord`read_return_cr(ar),
                    ret_ip = ActivationRecord`read_return_ip(ar),
                    ret_reg = ActivationRecord`read_ret_reg(ar),
                    ret_num_regs =
                        if
                            ret_cr <> Data`invalidPointerValue
                        then
                            CodeRecord`read_num_regs(ret_cr)
                        else
                            0
                in
                    (Register`offset_registers(ret_num_regs  * -1);
                    if src > 0 and ret_reg > 0 then Register`move(ret_reg, src + ret_num_regs);
                    for i = 1 to  num_regs do Register`write_invalid(ret_num_regs + i);
                    Register`write_cr(ret_cr);
                    Register`write_ip(ret_ip);
                    Register`write_ar(ret_ar))
            else
                err("ret instruction error: no cr/ar");
    
    rettrue : Register`Register * Register`Register ==> ()
    rettrue(boolReg, src) ==
        if
            boolReg > 0
        then
            cases Register`read_oid(boolReg):
                (Data`trueValue) -> ret(src),
                others -> skip
                end
        else
            err("rettrue instruction error: operand1 not specified");
    
    retfalse : Register`Register * Register`Register ==> ()
    retfalse(boolReg, src) ==
        if
            boolReg > 0
        then
            cases Register`read_oid(boolReg):
                (Data`falseValue) -> ret(src),
                others -> skip
                end
        else
            err("rettrue instruction error: operand1 not specified");

end Instruction
