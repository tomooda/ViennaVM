module InstructionTest
imports
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assert renamed assert;
            assertApproxEquals renamed assertApproxEquals;,
    from Instruction all,
    from Data all,
    from Register all,
    from Memory all,
    from CodeRecord all,
    from ActivationRecord all
exports all
definitions
operations
    test_reset : () ==> ()
    test_reset() ==
        (Instruction`movei(1, Data`int2oid(0));
        assertEquals(Register`read_int(1), 0, "r1 is now set to 0");
        Instruction`reset(1, 0, 0);
        assertEquals(
            Register`read_oid(1), Data`invalidOidValue, "reset r1 to invalid oid"));
    
    test_move : () ==> ()
    test_move() ==
        (Instruction`reset(1, 2, 0);
        Instruction`movei(1, Data`int2oid(0));
        assertEquals(Register`read_int(1), 0, "r1 is now set to 0");
        Instruction`move(2, 0, 1);
        assertEquals(Register`read_int(2), 0, "r2 is now set to 0"));
    
    test_alloc : () ==> ()
    test_alloc() ==
        (dcl p:Data`Pointer;
        Instruction`alloc(1, 0, 0, Data`int2oid(0));
        p := Register`read_pointer(1);
        assert(p <> Data`invalidPointerValue, "r1 is set to allocated heap");
        assert(
            Memory`basic_read(p + Memory`REFERENCE_COUNT_OFFSET) > 0,
            "the allocated heap is valid");
        Instruction`movei(1, Data`int2oid(0));
        assert(
            Memory`basic_read(p + Memory`REFERENCE_COUNT_OFFSET) = 0,
            "the allocated heap is free"));
    
    test_store_load : () ==> ()
    test_store_load() ==
        (dcl p1:Data`Pointer, p2:Data`Pointer;
        Instruction`alloc(1, 0, 0, Data`int2oid(1));
        Instruction`alloc(2, 0, 0, Data`int2oid(0));
        p1 := Register`read_pointer(1);
        p2 := Register`read_pointer(2);
        assertEquals(
            Memory`basic_read(p1 + Memory`REFERENCE_COUNT_OFFSET),
            1,
            "(r1).refCount = 1");
        assertEquals(
            Memory`basic_read(p2 + Memory`REFERENCE_COUNT_OFFSET),
            1,
            "(r2).refCount = 1");
        Instruction`store1(1, 0, 2);
        assertEquals(
            Memory`read_slot(Register`read_pointer(1), 1),
            Register`read_oid(2),
            "r1[1] = r2");
        assertEquals(
            Memory`basic_read(p1 + Memory`REFERENCE_COUNT_OFFSET),
            1,
            "(r1).refCount = 1");
        assertEquals(
            Memory`basic_read(p2 + Memory`REFERENCE_COUNT_OFFSET),
            2,
            "(r2).refCount = 2");
        Instruction`reset(1, 2, 0);
        assertEquals(
            Memory`basic_read(p1 + Memory`REFERENCE_COUNT_OFFSET),
            0,
            "(r1) is free");
        assertEquals(
            Memory`basic_read(p2 + Memory`REFERENCE_COUNT_OFFSET),
            0,
            "(r2) is free"));
    
    test_add : () ==> ()
    test_add() ==
        (Instruction`movei(1, Data`int2oid(3));
        Instruction`movei(2, Data`int2oid(-4));
        assertEquals(Register`read_int(1), 3, "r1 is set to 3"); -- "r1 <- 3"
        assertEquals(Register`read_int(2), -4, "r2 is set to -4"); -- "r2 <- -4"
        Instruction`add(3, 1, 2);
        assertEquals(Register`read_int(3), -1, "r3 is set to -1");
        Instruction`movei(1, Data`float2oid(Data`real2float(3.14))); -- "r3 <- r1 + r2"
        assertEquals(
            Register`read_float(1), Data`real2float(3.14), "r1 is set to 3.14");
        Instruction`add(4, 1, 2); -- "r1 <- 3.14"
        assertApproxEquals(
            Data`float2real(Register`read_float(4)),
            -0.86,
            0.00001,
            "r4 is set to -0.86"));
    
    test_sub : () ==> ()
    test_sub() ==
        (Instruction`movei(1, Data`int2oid(3)); -- "r4 <- r1 + r2"
        Instruction`movei(2, Data`int2oid(-4));
        assertEquals(Register`read_int(1), 3, "r1 is set to 3");
        assertEquals(Register`read_int(2), -4, "r2 is set to -4"); -- "r2 <- -4"
        Instruction`sub(3, 1, 2);
        assertEquals(Register`read_int(3), 7, "r3 is set to 7");
        Instruction`movei(1, Data`float2oid(Data`real2float(3.14))); -- "r3 <- r1 + r2"
        assertEquals(
            Register`read_float(1), Data`real2float(3.14), "r1 is set to 3.14");
        Instruction`sub(4, 1, 2);
        assertApproxEquals(
            Data`float2real(Register`read_float(4)),
            7.14,
            0.00001,
            "r4 is set to 7.14")); -- "r1 <- 3.14"
    
    test_mul : () ==> ()
    test_mul() ==
        (Instruction`movei(1, Data`int2oid(3)); -- "r4 <- r1 + r2"
        Instruction`movei(2, Data`int2oid(-4));
        assertEquals(Register`read_int(1), 3, "r1 is set to 3");
        assertEquals(Register`read_int(2), -4, "r2 is set to -4");
        Instruction`mul(3, 1, 2);
        assertEquals(Register`read_int(3), -12, "r3 is set to -12");
        Instruction`movei(1, Data`float2oid(Data`real2float(3.14)));
        assertEquals(
            Register`read_float(1), Data`real2float(3.14), "r1 is set to 3.14");
        Instruction`mul(4, 1, 2);
        assertApproxEquals(
            Data`float2real(Register`read_float(4)),
            -12.56,
            0.00001,
            "r4 is set to  -12.56"));
    
    test_fdiv : () ==> ()
    test_fdiv() ==
        (Instruction`movei(1, Data`float2oid(Data`real2float(3.14)));
        Instruction`movei(2, Data`int2oid(-4));
        assertEquals(
            Register`read_float(1), Data`real2float(3.14), "r1 is set to 3.14");
        assertEquals(Register`read_int(2), -4, "r2 is set to -4");
        Instruction`fdiv(3, 1, 2);
        assertApproxEquals(
            Data`float2real(Register`read_float(3)),
            -0.785,
            0.000001,
            "r3 is set to  -0.785"));
    
    test_idiv : () ==> ()
    test_idiv() ==
        (Instruction`movei(1, Data`int2oid(13));
        Instruction`movei(2, Data`int2oid(-4));
        assertEquals(Register`read_int(1), 13, "r1 is set to 13");
        assertEquals(Register`read_int(2), -4, "r2 is set to -4"); -- "r2 <- -4"
        Instruction`idiv(3, 1, 2);
        assertEquals(Register`read_int(3), -3, "r3 is set to -3"));
    
    test_imod : () ==> ()
    test_imod() ==
        (Instruction`movei(1, Data`int2oid(13)); -- "r3 <- r1 + r2"
        Instruction`movei(2, Data`int2oid(-4));
        assertEquals(Register`read_int(1), 13, "r1 is set to 13"); -- "r1 <- 13"
        assertEquals(Register`read_int(2), -4, "r2 is set to -4"); -- "r2 <- -4"
        Instruction`imod(3, 1, 2);
        assertEquals(Register`read_int(3), -3, "r3 is set to -3"));
    
    test_lessthan : () ==> ()
    test_lessthan() ==
        (Instruction`movei(1, Data`int2oid(4)); -- "r3 <- r1 + r2"
        Instruction`movei(2, Data`float2oid(Data`real2float(3.14)));
        Instruction`lessthan(3, 1, 2);
        assertEquals(Register`read_oid(3), Data`falseValue, "r3 is false");
        Instruction`lessthan(3, 2, 1);
        assertEquals(Register`read_oid(3), Data`trueValue, "r3 is true"));
    
    test_equal : () ==> ()
    test_equal() ==
        (Instruction`movei(1, Data`int2oid(4));
        Instruction`movei(2, Data`float2oid(Data`real2float(3.14)));
        Instruction`equal(3, 1, 2);
        assertEquals(Register`read_oid(3), Data`falseValue, "r3 is false");
        Instruction`movei(1, Data`int2oid(-3));
        Instruction`movei(2, Data`int2oid(-3));
        Instruction`equal(3, 1, 2);
        assertEquals(Register`read_oid(3), Data`trueValue, "r3 is true");
        Instruction`movei(1, Data`float2oid(Data`real2float(1.732)));
        Instruction`movei(2, Data`float2oid(Data`real2float(1.732)));
        Instruction`equal(3, 1, 2);
        assertEquals(Register`read_oid(3), Data`trueValue, "r3 is true"));
    
    test_bnot : () ==> ()
    test_bnot() ==
        (Instruction`movei(1, Data`trueValue);
        Instruction`bnot(2, 1);
        assertEquals(
            Register`read_oid(2),
            Data`falseValue,
            "r2 = not r1 = not true = false");
        Instruction`bnot(3, 2);
        assertEquals(
            Register`read_oid(3),
            Data`trueValue,
            "r3 = not r2 = not false = true"));
    
    test_jumptrue : () ==> ()
    test_jumptrue() ==
        (Register`write_ip(0);
        Instruction`movei(1, Data`trueValue);
        Instruction`movei(2, Data`int2oid(100));
        Instruction`jumptrue(1, 2);
        assertEquals(Register`read_ip(), 100, "jumped with true");
        Register`write_ip(0);
        Instruction`movei(1, Data`falseValue);
        Instruction`movei(2, Data`int2oid(100));
        Instruction`jumptrue(1, 2);
        assertEquals(Register`read_ip(), 0, "not jumped with false"));
    
    test_jumpfalse : () ==> ()
    test_jumpfalse() ==
        (Register`write_ip(0);
        Instruction`movei(1, Data`trueValue);
        Instruction`movei(2, Data`int2oid(100));
        Instruction`jumpfalse(1, 2);
        assertEquals(Register`read_ip(), 0, "not jumped with true");
        Register`write_ip(0);
        Instruction`movei(1, Data`falseValue);
        Instruction`movei(2, Data`int2oid(100));
        Instruction`jumpfalse(1, 2);
        assertEquals(Register`read_ip(), 100, "jumped with false"));
    
    test_jump : () ==> ()
    test_jump() ==
        (Register`write_ip(0);
        Instruction`movei(1, Data`int2oid(100));
        Instruction`jump(1);
        assertEquals(Register`read_ip(), 100, "jumped"));
    
    test_call : () ==> ()
    test_call() ==
        let
            caller_cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(2), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(3), nil)]),
            caller_ar =
                ActivationRecord`alloc_ar(
                    Data`invalidPointerValue, 1, 0, Data`invalidPointerValue, 0),
            callee_cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(2), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(3), nil)])
        in
            (Register`write_int(1, 10);
            Register`write_pointer(2, callee_cr);
            Register`write_cr(caller_cr);
            Register`write_ip(2);
            Register`write_ar(caller_ar);
            Instruction`call(1, 2);
            let callee_ar = Register`read_ar()
            in
                (assertEquals(Register`read_cr(), callee_cr, "cr is callee's");
                assertEquals(
                    ActivationRecord`read_dynamic_link(callee_ar),
                    caller_ar,
                    "dynamic link is at caller's ar");
                assertEquals(
                    ActivationRecord`read_return_cr(callee_ar), caller_cr, "caller's cr");
                assertEquals(ActivationRecord`read_return_ip(callee_ar), 2, "caller's ip");
                assertEquals(ActivationRecord`read_ret_reg(callee_ar), 1, "return value to r1");
                assertEquals(
                    ActivationRecord`read_local(callee_ar, 1),
                    Data`int2oid(10),
                    "r1 is saved");
                assertEquals(
                    ActivationRecord`read_local(callee_ar, 2),
                    Data`pointer2oid(callee_cr),
                    "r2 is saved")));
    
    test_callrec : () ==> ()
    test_callrec() ==
        let
            caller_cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(2), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(3), nil)]),
            caller_ar =
                ActivationRecord`alloc_ar(
                    Data`invalidPointerValue, 1, 0, Data`invalidPointerValue, 0)
        in
            (Register`write_int(1, 10);
            Register`write_int(2, 20);
            Register`write_cr(caller_cr);
            Register`write_ip(2);
            Register`write_ar(caller_ar);
            Instruction`callrec(1);
            let callee_ar = Register`read_ar()
            in
                (assertEquals(Register`read_cr(), caller_cr, "cr is caller's");
                assertEquals(
                    ActivationRecord`read_dynamic_link(callee_ar),
                    caller_ar,
                    "dynamic link is at caller's ar");
                assertEquals(
                    ActivationRecord`read_return_cr(callee_ar), caller_cr, "caller's cr");
                assertEquals(ActivationRecord`read_return_ip(callee_ar), 2, "caller's ip");
                assertEquals(ActivationRecord`read_ret_reg(callee_ar), 1, "return value to r1");
                assertEquals(
                    ActivationRecord`read_local(callee_ar, 1),
                    Data`int2oid(10),
                    "r1 is saved");
                assertEquals(
                    ActivationRecord`read_local(callee_ar, 2),
                    Data`int2oid(20),
                    "r2 is saved")));
    
    test_ret : () ==> ()
    test_ret() ==
        let
            caller_cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(2), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(3), nil)]),
            caller_ar =
                ActivationRecord`alloc_ar(
                    Data`invalidPointerValue, 1, 0, Data`invalidPointerValue, 0),
            callee_cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(2), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(3), nil)])
        in
            (Register`write_int(1, 10);
            Register`write_pointer(2, callee_cr);
            Register`write_cr(caller_cr);
            Register`write_ip(2);
            Register`write_ar(caller_ar);
            Instruction`call(1, 2);
            let callee_ar = Register`read_ar()
            in
                (Register`write_int(1, 0);
                Register`write_int(2, 0);
                Register`write_int(3, 100);
                Register`write_ip(4);
                Instruction`ret(3);
                assertEquals(Register`read_int(1), 100, "r1 is the return value");
                assertEquals(Register`read_pointer(2), callee_cr, "r2 is restored");
                assertEquals(Register`read_cr(), caller_cr, "cr is the caller");
                assertEquals(Register`read_ip(), 2, "ip is the caller");
                assertEquals(Register`read_ar(), caller_ar, "ar is the caller");
                assertEquals(
                    Memory`basic_read(callee_ar + Memory`SIZE_OFFSET),
                    0,
                    "callee's ar is free")));
    
    test_rettrue : () ==> ()
    test_rettrue() ==
        let
            caller_cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(2), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(3), nil)]),
            caller_ar =
                ActivationRecord`alloc_ar(
                    Data`invalidPointerValue, 1, 0, Data`invalidPointerValue, 0),
            callee_cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(2), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(3), nil)])
        in
            (Register`write_int(1, 10);
            Register`write_pointer(2, callee_cr);
            Register`write_cr(caller_cr);
            Register`write_ip(2);
            Register`write_ar(caller_ar);
            Instruction`call(1, 2);
            let callee_ar = Register`read_ar()
            in
                (Register`write_int(1, 0);
                Register`write_oid(2, Data`trueValue);
                Register`write_oid(3, Data`falseValue);
                Register`write_ip(4);
                Instruction`rettrue(3, 2);
                assertEquals(Register`read_ip(), 4, "not returned");
                Instruction`rettrue(2, 3);
                assertEquals(Register`read_oid(1), Data`falseValue, "r1 is the return value");
                assertEquals(Register`read_pointer(2), callee_cr, "r2 is restored");
                assertEquals(Register`read_cr(), caller_cr, "cr is the caller");
                assertEquals(Register`read_ip(), 2, "ip is the caller");
                assertEquals(Register`read_ar(), caller_ar, "ar is the caller");
                assertEquals(
                    Memory`basic_read(callee_ar + Memory`SIZE_OFFSET),
                    0,
                    "callee's ar is free")));
    
    test_retfalse : () ==> ()
    test_retfalse() ==
        let
            caller_cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(2), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(3), nil)]),
            caller_ar =
                ActivationRecord`alloc_ar(
                    Data`invalidPointerValue, 1, 0, Data`invalidPointerValue, 0),
            callee_cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(2), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(3), nil)])
        in
            (Register`write_int(1, 10);
            Register`write_pointer(2, callee_cr);
            Register`write_cr(caller_cr);
            Register`write_ip(2);
            Register`write_ar(caller_ar);
            Instruction`call(1, 2);
            let callee_ar = Register`read_ar()
            in
                (Register`write_int(1, 0);
                Register`write_oid(2, Data`trueValue);
                Register`write_oid(3, Data`falseValue);
                Register`write_ip(4);
                Instruction`retfalse(2, 3);
                assertEquals(Register`read_ip(), 4, "not returned");
                Instruction`retfalse(3, 2);
                assertEquals(Register`read_oid(1), Data`trueValue, "r1 is the return value");
                assertEquals(Register`read_pointer(2), callee_cr, "r2 is restored");
                assertEquals(Register`read_cr(), caller_cr, "cr is the caller");
                assertEquals(Register`read_ip(), 2, "ip is the caller");
                assertEquals(Register`read_ar(), caller_ar, "ar is the caller");
                assertEquals(
                    Memory`basic_read(callee_ar + Memory`SIZE_OFFSET),
                    0,
                    "callee's ar is free")));
    
    test_step : () ==> ()
    test_step() ==
        (let
            cr =
                CodeRecord`assemble(
                    Data`invalidOidValue,
                    Data`invalidOidValue,
                    /* r1: sum, r2: loop variant=1,...,10, r3: stop=10, r4: step=1, r5: jump label=8 r6: jump flag*/
                    [mk_(Instruction`MOVEI, 1, 0, 0, Data`int2oid(0), nil),
                    mk_(Instruction`MOVEI, 3, 0, 0, Data`int2oid(10), nil),
                    mk_(Instruction`MOVEI, 2, 0, 0, Data`int2oid(1), nil),
                    mk_(Instruction`MOVE, 4, 0, 2, nil, nil),
                    mk_(Instruction`MOVEI, 5, 0, 0, "loop", nil),
                    mk_(Instruction`ADD, 1, 1, 2, nil, "loop"),
                    mk_(Instruction`ADD, 2, 2, 4, nil, nil),
                    mk_(Instruction`LESSTHAN, 6, 3, 2, nil, nil),
                    mk_(Instruction`JUMPFALSE, 6, 5, 0, nil, nil),
                    mk_(Instruction`ERR, 0, 0, 0, nil, nil)])
        in
            (Register`write_cr(cr);
            Register`write_ip(0);
            while Register`read_ip() < 13 do Instruction`step();
            assertEquals(Register`read_int(2), 11, "r2 = 11 (just over the stop value=10)");
            assertEquals(Register`read_int(1), 55, "r1 = 55 (sum of 0,...,10)")));

end InstructionTest
