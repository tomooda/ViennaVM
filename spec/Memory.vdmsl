module Memory
imports from Data all
exports all
definitions
types
     Slot :: address : Data`Pointer size : Data`Qword;

values
     /* CONSTANTS ON MEMORY SPACE */
     ALIGNMENT = 64;
     HEAP_PAGE_SIZE = 1  * 1024;
     POOL_PAGE_SIZE = HEAP_PAGE_SIZE div ALIGNMENT;
     /* DATA STRUCTURE OF ALLOCATED MEMORY */
     MAX_OBJECT_SIZE = 1024; -- dword
     SIZE_OFFSET = 0; -- dword
     FLAGS_OFFSET = 4; -- dword
     REFERENCE_COUNT_OFFSET = 8; -- qword
     HASH_OFFSET = 16;
     SLOTS_SIZE_OFFSET = 24;
     CONTENT_OFFSET = 32;
     /* FLAGS IN "basic_read_dword(pointer + FLAGS_OFFSET)" */
     LARGE_OBJECT_FLAG = 1;

functions
    align : Data`Qword -> Data`Qword
    align(x) == ((x - 1) div ALIGNMENT + 1)  * ALIGNMENT;

state State of
    heapPages : seq of (seq of Data`Byte)
    poolPages : seq of (seq of Slot)
inv mk_State(heaps, pools) == len heaps = len pools
init s ==
    s
    = mk_State(
        [[0 | i in set {1, ..., HEAP_PAGE_SIZE}]],
        [[mk_Slot(0, HEAP_PAGE_SIZE)]
        ^ [mk_Slot(0, 0) | i in set {1, ..., POOL_PAGE_SIZE - 1}]])
end

operations
    reset : () ==> ()
    reset() ==
        atomic(heapPages := [[0 | i in set {1, ..., HEAP_PAGE_SIZE}]];
            poolPages
                := [[mk_Slot(0, HEAP_PAGE_SIZE)]
                ^ [mk_Slot(0, 0) | i in set {1, ..., POOL_PAGE_SIZE - 1}]]);
    
    alloc : Data`Qword ==> Data`Pointer
    alloc(num_slots) ==
        let size = align(CONTENT_OFFSET + num_slots  * 8)
        in
            (for page = 1 to  len poolPages
            do
                let pool = poolPages(page)
                in
                    for i = 1 to  len pool
                    do
                        let newSize = pool(i).size - size
                        in
                            if
                                pool(i).size > 0 and newSize >= 0
                            then
                                let
                                    address = pool(i).address,
                                    pointer = (page - 1)  * HEAP_PAGE_SIZE + address
                                in
                                    (poolPages(page)(i) .address := pool(i).address + size;
                                    poolPages(page)(i) .size := newSize;
                                    basic_write_dword(pointer + SIZE_OFFSET, size);
                                    basic_write_dword(pointer + FLAGS_OFFSET, 0);
                                    basic_write(pointer + REFERENCE_COUNT_OFFSET, 0);
                                    basic_write(pointer + HASH_OFFSET, Data`invalidIntValue);
                                    basic_write(pointer + SLOTS_SIZE_OFFSET, num_slots);
                                    for s = 0 to  num_slots - 1
                                    do
                                        basic_write(pointer + CONTENT_OFFSET + s  * 8, Data`invalidOidValue);
                                    return pointer);
            add_page();
            return alloc(num_slots));
    
    release : Data`Pointer ==> ()
    release(pointer) ==
        let
            size = basic_read_dword(pointer + SIZE_OFFSET),
            page = pointer div HEAP_PAGE_SIZE + 1,
            pool = poolPages(page),
            address = pointer mod HEAP_PAGE_SIZE
        in
            (basic_write_dword(pointer + SIZE_OFFSET, 0);
            for i = 0 to  slots_size(pointer) - 1
            do
                let
                    p =
                        Data`oid2pointer(basic_read(pointer + CONTENT_OFFSET + i  * 8))
                in
                    if p <> Data`invalidPointerValue then decrement_reference_count(p);
            for i = 1 to  len pool
            do
                (if
                    pool(i).size <> 0 and pool(i).address + pool(i).size = address
                then
                    (for j = i + 1 to  len pool
                    do
                        if
                            pool(j).size <> 0 and address + size = pool(j).address
                        then
                            (poolPages(page)(i) .size
                                := poolPages(page)(i).size + poolPages(page)(j).size + size;
                            poolPages(page)(j) .address := 0;
                            poolPages(page)(j) .size := 0;
                            return );
                    poolPages(page)(i) .size := pool(i).size + size;
                    return );
                if
                    pool(i).size <> 0 and address + size = pool(i).address
                then
                    (for j = i + 1 to  len pool
                    do
                        if
                            pool(j).size <> 0 and pool(j).address + pool(j).size = address
                        then
                            (atomic(poolPages(page)(i) .address := poolPages(page)(j).address;
                                poolPages(page)(i) .size
                                    := poolPages(page)(i).size + poolPages(page)(j).size + size;
                                poolPages(page)(j) .address := 0;
                                poolPages(page)(j) .size := 0);
                            return );
                    atomic(poolPages(page)(i) .address := address;
                        poolPages(page)(i) .size := pool(i).size + size);
                    return ));
            for i = 1 to  len pool
            do
                if
                    pool(i).size = 0
                then
                    (atomic(poolPages(page)(i) .address := address;
                        poolPages(page)(i) .size := size);
                    return ));
    
    pure slots_size : Data`Pointer ==> Data`Dword
    slots_size(pointer) ==
        return basic_read(pointer + SLOTS_SIZE_OFFSET);
    
    pure read_slot : Data`Pointer * Data`Int ==> Data`OID
    read_slot(pointer, index) ==
        return basic_read(pointer + CONTENT_OFFSET + (index - 1)  * 8)
    pre  index > 0 and index <= slots_size(pointer);
    
    write_slot : Data`Pointer * Data`Int * Data`OID ==> ()
    write_slot(pointer, index, oid) ==
        (basic_write(pointer + HASH_OFFSET, Data`invalidIntValue);
        let oidPointer = Data`oid2pointer(oid)
        in
            if
                oidPointer <> Data`invalidPointerValue
            then
                increment_reference_count(oidPointer);
        let
            address = pointer + CONTENT_OFFSET + (index - 1)  * 8,
            oldPointer = Data`oid2pointer(basic_read(address))
        in
            (if
                oldPointer <> Data`invalidPointerValue
            then
                decrement_reference_count(oldPointer);
            basic_write(address, oid)))
    pre  index > 0 and index <= slots_size(pointer);
    
    add_page : () ==> ()
    add_page() ==
        atomic(heapPages := heapPages ^ [[0 | i in set {1, ..., HEAP_PAGE_SIZE}]];
            poolPages
                := poolPages
                ^ [[mk_Slot(0, HEAP_PAGE_SIZE)]
                ^ [mk_Slot(0, 0) | i in set {1, ..., POOL_PAGE_SIZE - 1}]]);
    
    pure basic_read : Data`Pointer ==> Data`Qword
    basic_read(pointer) ==
        let
            heap = heapPages(pointer div HEAP_PAGE_SIZE + 1),
            address = pointer mod HEAP_PAGE_SIZE + 1
        in
            return heap(address)
                + (heap(address + 1)
                    + (heap(address + 2)
                        + (heap(address + 3)
                            + (heap(address + 4)
                                + +(heap(address + 5)
                                    + (heap(address + 6) + heap(address + 7)  * 0x100)  * 0x100)
                                 * 0x100)
                             * 0x100)
                         * 0x100)
                     * 0x100)
                 * 0x100
    pre 
        pointer mod HEAP_PAGE_SIZE <= HEAP_PAGE_SIZE - 8
        and pointer div HEAP_PAGE_SIZE < len heapPages;
    
    basic_write : Data`Pointer * Data`Qword ==> ()
    basic_write(pointer, data) ==
        let
            page = pointer div HEAP_PAGE_SIZE + 1,
            address = pointer mod HEAP_PAGE_SIZE + 1
        in
            (dcl d:nat := data;
            heapPages(page)(address) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 1) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 2) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 3) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 4) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 5) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 6) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 7) := d mod 0x100)
    pre 
        pointer mod HEAP_PAGE_SIZE <= HEAP_PAGE_SIZE - 8
        and pointer div HEAP_PAGE_SIZE < len heapPages;
    
    pure basic_read_dword : Data`Pointer ==> Data`Dword
    basic_read_dword(pointer) ==
        let
            heap = heapPages(pointer div HEAP_PAGE_SIZE + 1),
            address = pointer mod HEAP_PAGE_SIZE + 1
        in
            return heap(address)
                + (heap(address + 1)
                    + (heap(address + 2) + heap(address + 3)  * 0x100)  * 0x100)
                 * 0x100
    pre 
        pointer mod HEAP_PAGE_SIZE <= HEAP_PAGE_SIZE - 4
        and pointer div HEAP_PAGE_SIZE < len heapPages;
    
    basic_write_dword : Data`Pointer * Data`Dword ==> ()
    basic_write_dword(pointer, data) ==
        let
            page = pointer div HEAP_PAGE_SIZE + 1,
            address = pointer mod HEAP_PAGE_SIZE + 1
        in
            (dcl d:nat := data;
            heapPages(page)(address) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 1) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 2) := d mod 0x100;
            d := d div 0x100;
            heapPages(page)(address + 3) := d mod 0x100)
    pre 
        pointer mod HEAP_PAGE_SIZE <= HEAP_PAGE_SIZE - 4
        and pointer div HEAP_PAGE_SIZE < len heapPages;
    
    pure basic_read_byte : Data`Pointer ==> Data`Byte
    basic_read_byte(pointer) ==
        let
            heap = heapPages(pointer div HEAP_PAGE_SIZE + 1),
            address = pointer mod HEAP_PAGE_SIZE + 1
        in return heap(address)
    pre  pointer div HEAP_PAGE_SIZE < len heapPages;
    
    basic_write_byte : Data`Pointer * Data`Byte ==> ()
    basic_write_byte(pointer, data) ==
        let
            page = pointer div HEAP_PAGE_SIZE + 1,
            address = pointer mod HEAP_PAGE_SIZE + 1
        in heapPages(page)(address) := data
    pre  pointer div HEAP_PAGE_SIZE < len heapPages;
    
    increment_reference_count : Data`Pointer ==> ()
    increment_reference_count(pointer) ==
        basic_write(
            pointer + REFERENCE_COUNT_OFFSET,
            basic_read(pointer + REFERENCE_COUNT_OFFSET) + 1);
    
    decrement_reference_count : Data`Pointer ==> ()
    decrement_reference_count(pointer) ==
        let p = pointer + REFERENCE_COUNT_OFFSET, c = basic_read(p) - 1
        in
            (basic_write(p, c);
            if c = 0 then release(pointer));
    
    pure read_reference_count : Data`Pointer ==> Data`Qword
    read_reference_count(pointer) ==
        return basic_read(pointer + REFERENCE_COUNT_OFFSET);
    
    pure read_hash : Data`Pointer ==> Data`Int
    read_hash(pointer) == return basic_read(pointer + HASH_OFFSET);
    
    write_hash : Data`Pointer * Data`Int ==> ()
    write_hash(pointer, hash) ==
        basic_write(pointer + HASH_OFFSET, hash);

end Memory
