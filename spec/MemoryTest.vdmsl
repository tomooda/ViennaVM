module MemoryTest
imports
    from Memory all,
    from Data all,
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assert renamed assert;
exports all
definitions
operations
    test_align : () ==> ()
    test_align() ==
        (for i = 1 to  Memory`ALIGNMENT
        do assertEquals(Memory`align(i), Memory`ALIGNMENT, "0");
        for i = Memory`ALIGNMENT + 1 to  Memory`ALIGNMENT  * 2
        do assertEquals(Memory`align(i), Memory`ALIGNMENT  * 2, "1"));
    
    test_basic_read : () ==> ()
    test_basic_read() ==
        (Memory`addPage();
        Memory`basic_write(0x12, 0xfedcba9876543210);
        assertEquals(
            Memory`basic_read(0x12),
            0xfedcba9876543210,
            "basic_read 64bits immediate");
        Memory`basic_write_byte(0x10, 0x01);
        Memory`basic_write_byte(0x11, 0x23);
        Memory`basic_write_byte(0x12, 0x45);
        Memory`basic_write_byte(0x13, 0x67);
        Memory`basic_write_byte(0x14, 0x89);
        Memory`basic_write_byte(0x15, 0xab);
        Memory`basic_write_byte(0x16, 0xcd);
        Memory`basic_write_byte(0x17, 0xef);
        assertEquals(
            Memory`basic_read(0x10),
            0xefcdab8967452301,
            "basic_read little endian"));
    
    test_basic_write : () ==> ()
    test_basic_write() ==
        (Memory`addPage();
        for i = 0 to  0x100 do Memory`basic_write_byte(i, 0x00);
        Memory`basic_write(0x10, 0x0123456789abcdef);
        assertEquals(Memory`basic_read_byte(0x0f), 0x00, "no basic_write on ptr-1");
        assertEquals(Memory`basic_read_byte(0x18), 0x00, "no basic_write on ptr+8");
        assertEquals(Memory`basic_read_byte(0x10), 0xef, "1st byte");
        assertEquals(Memory`basic_read_byte(0x11), 0xcd, "2nd byte");
        assertEquals(Memory`basic_read_byte(0x12), 0xab, "3rd byte");
        assertEquals(Memory`basic_read_byte(0x13), 0x89, "4th byte");
        assertEquals(Memory`basic_read_byte(0x14), 0x67, "5th byte");
        assertEquals(Memory`basic_read_byte(0x15), 0x45, "6th byte");
        assertEquals(Memory`basic_read_byte(0x16), 0x23, "7th byte");
        assertEquals(Memory`basic_read_byte(0x17), 0x01, "8th byte"));
    
    test_basic_read_dword : () ==> ()
    test_basic_read_dword() ==
        (Memory`addPage();
        Memory`basic_write_dword(0x12, 0x12345678);
        assertEquals(
            Memory`basic_read_dword(0x12),
            0x12345678,
            "basic_read 32bits immediate");
        Memory`basic_write_byte(0x10, 0x21);
        Memory`basic_write_byte(0x11, 0x43);
        Memory`basic_write_byte(0x12, 0x65);
        Memory`basic_write_byte(0x13, 0x87);
        assertEquals(
            Memory`basic_read_dword(0x10), 0x87654321, "basic_read little endian"));
    
    test_basic_write_dword : () ==> ()
    test_basic_write_dword() ==
        (Memory`addPage();
        for i = 0 to  0x100 do Memory`basic_write_byte(i, 0x00);
        Memory`basic_write_dword(0x10, 0x89abcdef);
        assertEquals(Memory`basic_read_byte(0x0f), 0x00, "no basic_write on ptr-1");
        assertEquals(Memory`basic_read_byte(0x14), 0x00, "no basic_write on ptr+4");
        assertEquals(Memory`basic_read_byte(0x10), 0xef, "1st byte");
        assertEquals(Memory`basic_read_byte(0x11), 0xcd, "2nd byte");
        assertEquals(Memory`basic_read_byte(0x12), 0xab, "3rd byte");
        assertEquals(Memory`basic_read_byte(0x13), 0x89, "4th byte"));
    
    test_basic_read_byte : () ==> ()
    test_basic_read_byte() ==
        (Memory`addPage();
        for i = 0 to  0x100 do Memory`basic_write_byte(i, 0x00);
        Memory`basic_write_byte(0x12, 0xff);
        assertEquals(Memory`basic_read(0x12), 0xff, "basic_read a byte"));
    
    test_basic_write_byte : () ==> ()
    test_basic_write_byte() ==
        (Memory`addPage();
        for i = 0 to  0x100 do Memory`basic_write_byte(i, 0x00);
        Memory`basic_write_byte(0x10, 0xff);
        assertEquals(Memory`basic_read_byte(0x0f), 0x00, "no basic_write on ptr-1");
        assertEquals(Memory`basic_read_byte(0x11), 0x00, "no basic_write on ptr+8");
        assertEquals(Memory`basic_read_byte(0x10), 0xff, "the byte"));
    
    test_allocate_free : () ==> ()
    test_allocate_free() ==
        (dcl p1:[nat] := nil, p2:[nat] := nil, p3:[nat] := nil;
        Memory`reset();
        p1 := Memory`alloc(0);
        p2 := Memory`alloc(0);
        assert(p1 <> nil, "p1 allocated");
        assert(p2 <> nil, "p2 allocated");
        assert(p1 <> p2, "p1 <> p2");
        Memory`free(p1);
        Memory`free(p2);
        for i = 1 to  Memory`POOL_PAGE_SIZE do Memory`clean_pool();
        p3 := Memory`alloc(0);
        assertEquals(p3, p1, "allocated the same memory"));
    
    test_referenceCount : () ==> ()
    test_referenceCount() ==
        let p = Memory`alloc(0x10)
        in
            (assert(Memory`basic_read_dword(p + Memory`SIZE_OFFSET) > 0, "allocated");
            assertEquals(
                Memory`basic_read(p + Memory`REFERENCE_COUNT_OFFSET),
                0,
                "refCount= 0 at the beginning");
            Memory`incrementReferenceCount(p);
            assertEquals(
                Memory`basic_read(p + Memory`REFERENCE_COUNT_OFFSET),
                1,
                "refCount is incremented");
            assert(
                Memory`basic_read_dword(p + Memory`SIZE_OFFSET) > 0,
                "still allocated");
            Memory`incrementReferenceCount(p);
            assertEquals(
                Memory`basic_read(p + Memory`REFERENCE_COUNT_OFFSET),
                2,
                "refCount is incremented");
            assert(
                Memory`basic_read_dword(p + Memory`SIZE_OFFSET) > 0,
                "still allocated");
            Memory`decrementReferenceCount(p);
            assertEquals(
                Memory`basic_read(p + Memory`REFERENCE_COUNT_OFFSET),
                1,
                "refCount is decremented");
            assert(
                Memory`basic_read_dword(p + Memory`SIZE_OFFSET) > 0,
                "still allocated");
            Memory`decrementReferenceCount(p);
            assert(Memory`basic_read_dword(p + Memory`SIZE_OFFSET) = 0, "free"));
    
    test_read_write_slot : () ==> ()
    test_read_write_slot() ==
        let
            p1 = Memory`alloc(2), p2 = Memory`alloc(1), p3 = Memory`alloc(1)
        in
            (Memory`write_slot(p1, 1, Data`int2oid(123));
            Memory`write_slot(p1, 2, Data`char2oid(0x41));
            assertEquals(
                Data`oid2int(Memory`read_slot(p1, 1)),
                123,
                "read and write 123 to slot");
            assertEquals(
                Data`oid2char(Memory`read_slot(p1, 2)), 0x41, "read and write 'A'");
            Memory`write_slot(p2, 1, Data`pointer2oid(p1));
            assertEquals(
                Memory`basic_read(p1 + Memory`REFERENCE_COUNT_OFFSET),
                1,
                "refCount of p1 is incremented");
            Memory`write_slot(p3, 1, Data`pointer2oid(p2));
            assertEquals(
                Memory`basic_read(p2 + Memory`REFERENCE_COUNT_OFFSET),
                1,
                "refCount of p2 is incremented");
            Memory`write_slot(p3, 1, Data`int2oid(0));
            assert(
                Memory`basic_read_dword(p1 + Memory`SIZE_OFFSET) = 0, "p1 is free");
            assert(
                Memory`basic_read_dword(p2 + Memory`SIZE_OFFSET) = 0, "p2 is free"));

end MemoryTest
