module Record
imports
    from Data all,
    from Memory all,
    from Equality all,
    from RecordType all
exports all
definitions
types
     FieldSpec :: name : seq of char equality : bool;

values
     TYPE_SLOT = 1;
     ELEMENTS_SLOT_OFFSET = 1;

operations
    alloc : Data`Qword ==> Data`Pointer
    alloc(s) == Memory`alloc(s + ELEMENTS_SLOT_OFFSET);
    
    make : Data`Pointer ==> Data`Pointer
    make(t) ==
        let p = alloc(RecordType`fields_size(t))
        in
            (Memory`write_slot(p, TYPE_SLOT, Data`pointer2oid(t));
            return p);
    
    pure fields_size : Data`Pointer ==> Data`Qword
    fields_size(p) ==
        return Memory`slots_size(p) - ELEMENTS_SLOT_OFFSET;
    
    pure read_constructor : Data`Pointer ==> Data`OID
    read_constructor(p) == return Memory`read_slot(p, TYPE_SLOT);
    
    pure read : Data`Pointer * Data`Qword ==> Data`OID
    read(p, index) ==
        return Memory`read_slot(p, index + ELEMENTS_SLOT_OFFSET)
    pre  1 <= index and index <= fields_size(p);
    
    write : Data`Pointer * Data`Qword * Data`OID ==> ()
    write(p, index, elem) ==
        return Memory`write_slot(p, index + ELEMENTS_SLOT_OFFSET, elem)
    pre  1 <= index and index <= fields_size(p);

end Record
