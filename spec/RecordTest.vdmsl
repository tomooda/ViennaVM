module RecordTest
imports
    from Data all,
    from Memory all,
    from Equality all,
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assert renamed assert;,
    from RecordType all,
    from Record all
exports all
definitions
operations
    makeRecord : Data`Pointer * seq of Data`OID ==> Data`Pointer
    makeRecord(t, oids) ==
        let p : Data`Pointer = Record`make(t)
        in
            (for i = 1 to  Record`fields_size(p)
            do
                Record`write(p, i, if i <= len oids then oids(i) else Data`invalidOidValue);
            return p)
    pre  len oids = RecordType`fields_size(t);
    
    test_alloc : () ==> ()
    test_alloc() ==
        let p1 = Record`alloc(1)
        in
            (assertEquals(Record`fields_size(p1), 1, "fields_size(alloc(1)) = 1");
            assertEquals(
                Record`read_constructor(p1),
                Data`invalidOidValue,
                "constructor not assigned");
            assertEquals(
                Record`read(p1, 1), Data`invalidOidValue, "field1 is not assigned"));
    
    test_make : () ==> ()
    test_make() ==
        let
            t = RecordType`alloc(2),
            p = Record`make(t),
            c = Record`read_constructor(p)
        in
            (assertEquals(Data`pointer2oid(t), c, "oid(t) = c");
            assertEquals(Data`oid2pointer(c), t, "pointer(c) = t");
            assertEquals(Record`fields_size(p), 2, "fields_size(p) = 2");
            assertEquals(Record`read(p, 1), Data`invalidOidValue, "p(1) = undefined"));
    
    test_read_write : () ==> ()
    test_read_write() ==
        let p = Record`make(RecordType`alloc(2))
        in
            (Record`write(p, 1, Data`int2oid(1));
            Record`write(p, 2, Data`float2oid(Data`real2float(2.0)));
            assertEquals(Record`read(p, 1), Data`int2oid(1), "p(1) = oid(1)");
            assertEquals(
                Record`read(p, 2),
                Data`float2oid(Data`real2float(2.0)),
                "p(2) = oid(2.0)");
            Record`write(p, 1, Data`int2oid(3));
            Record`write(p, 2, Data`float2oid(Data`real2float(4.0)));
            assertEquals(Record`read(p, 1), Data`int2oid(3), "p(1) = oid(3)");
            assertEquals(
                Record`read(p, 2),
                Data`float2oid(Data`real2float(4.0)),
                "p(2) = oid(4.0)"));

end RecordTest
