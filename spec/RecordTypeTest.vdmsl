module RecordTypeTest
imports
    from Data all,
    from Memory all,
    from Equality all,
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assert renamed assert;,
    from RecordType all
exports all
definitions
operations
    makeRecordType : seq of bool ==> Data`Pointer
    makeRecordType(flags) ==
        let p : Data`Pointer = RecordType`alloc(len flags)
        in
            (for i = 1 to  len flags
            do RecordType`write_equality_visibility(p, i, flags(i));
            return p)
    pre  len flags > 0;
    
    test_alloc : () ==> ()
    test_alloc() ==
        let p1 = RecordType`alloc(1), p2 = RecordType`alloc(2)
        in
            (assertEquals(RecordType`fields_size(p1), 1, "fields_size(alloc(1)) = 1");
            assertEquals(
                RecordType`read_equality_visibility(p1, 1),
                true,
                "field 1 is visible by default");
            assertEquals(RecordType`fields_size(p2), 2, "fields_size(alloc(2)) = 2");
            assertEquals(
                RecordType`read_equality_visibility(p2, 1),
                true,
                "field 1 is visible by default");
            assertEquals(
                RecordType`read_equality_visibility(p2, 2),
                true,
                "field 2 is visible by default"));
    
    test_read_write_equality_visibility : () ==> ()
    test_read_write_equality_visibility() ==
        let p = RecordType`alloc(2)
        in
            (assertEquals(
                RecordType`read_equality_visibility(p, 1),
                true,
                "field 1 is visible by default");
            assertEquals(
                RecordType`read_equality_visibility(p, 2),
                true,
                "field 2 is visible by default");
            RecordType`write_equality_visibility(p, 1, false);
            assertEquals(
                RecordType`read_equality_visibility(p, 1),
                false,
                "field 1 is set invisible. field 1 is invisible");
            assertEquals(
                RecordType`read_equality_visibility(p, 2),
                true,
                "field 1 is set invisible. field 2 is visible");
            RecordType`write_equality_visibility(p, 2, false);
            assertEquals(
                RecordType`read_equality_visibility(p, 1),
                false,
                "field 2 is set invisible. field 1 is invisible");
            assertEquals(
                RecordType`read_equality_visibility(p, 2),
                false,
                "field 2 is set invisible. field 2 is invisible"));
    
end RecordTypeTest
