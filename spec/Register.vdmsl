module Register
imports
    from Data all,
    from Memory all,
    from Data types Float renamed Float;
exports all
definitions
types
     Reg :: oid : Data`OID i : Data`Int f : Data`Float c : Data`Char;
     Register = nat;

state State of
    codeRecord : Data`Pointer
    instructionPointer : Data`Dword
    activationRecord : Data`Pointer
    registers : seq of Reg
    registerOffset : Data`Dword
init s ==
    s
    = mk_State(
        Data`invalidPointerValue,
        0,
        Data`invalidPointerValue,
        [mk_Reg(
            Data`invalidOidValue,
            Data`invalidIntValue,
            Data`invalidFloatValue,
            Data`invalidCharValue)
            | i in set {1, ..., 256}],
        0)
end

operations
    reset : () ==> ()
    reset() == registerOffset := 0;
    
    pure read_cr : () ==> Data`Pointer
    read_cr() == return codeRecord;
    
    write_cr : Data`Pointer ==> ()
    write_cr(pointer) ==
        let old_cr = codeRecord
        in
            (codeRecord := pointer;
            instructionPointer := 0;
            if
                codeRecord <> Data`invalidPointerValue
            then
                Memory`increment_reference_count(codeRecord);
            if
                old_cr <> Data`invalidPointerValue
            then
                Memory`decrement_reference_count(old_cr));
    
    pure read_ip : () ==> Data`Dword
    read_ip() == return instructionPointer;
    
    write_ip : Data`Dword ==> ()
    write_ip(i) == instructionPointer := i;
    
    offset_ip : int ==> ()
    offset_ip(offset) ==
        instructionPointer := instructionPointer + offset;
    
    pure read_ar : () ==> Data`Pointer
    read_ar() == return activationRecord;
    
    write_ar : Data`Pointer ==> ()
    write_ar(ar) ==
        let old_ar = activationRecord
        in
            (activationRecord := ar;
            if
                ar <> Data`invalidPointerValue
            then
                Memory`increment_reference_count(ar);
            if
                old_ar <> Data`invalidPointerValue
            then
                Memory`decrement_reference_count(old_ar));
    
    read_registers_offset : () ==> Data`Dword
    read_registers_offset() == return registerOffset;
    
    write_registers_offset : Data`Dword ==> ()
    write_registers_offset(offset) == registerOffset := offset;
    
    offset_registers : int ==> ()
    offset_registers(offset) ==
        registerOffset := registerOffset + offset;
    
    move : Register * Register ==> ()
    move(dst, src) ==
        let r1 = dst + registerOffset, r2 = src + registerOffset
        in
            (let p = registers(r2).oid
            in (if Data`isPointer(p) then Memory`increment_reference_count(p));
            let p = registers(r1).oid
            in (if Data`isPointer(p) then Memory`decrement_reference_count(p));
            registers(r1) := registers(r2));
    
    read_oid : Register ==> Data`OID
    read_oid(src) ==
        let r = src + registerOffset, register : Reg = registers(r)
        in
            if register.oid <> Data`invalidTag
                then return register.oid
            elseif register.i <> Data`invalidIntValue
                then (dcl oid:Data`OID := Data`int2oid(register.i);
                registers(r) .oid := oid;
                return oid)
            elseif register.f <> Data`invalidFloatValue
                then (dcl oid:Data`OID := Data`float2oid(register.f);
                registers(r) .oid := oid;
                return oid)
            elseif register.c <> Data`invalidCharValue
                then (dcl oid:Data`OID := Data`char2oid(register.c);
                registers(r) .oid := oid;
                return oid)
            else
                return Data`invalidTag;
    
    write_oid : Register * Data`OID ==> ()
    write_oid(dst, oid) ==
        let
            r = dst + registerOffset,
            p1 = registers(r).oid,
            p2 = Data`oid2pointer(oid)
        in
            (if
                p2 <> Data`invalidPointerValue
            then
                Memory`increment_reference_count(p2);
            if Data`isPointer(p1) then Memory`decrement_reference_count(p1);
            registers(r)
                := mk_Reg(
                    oid,
                    Data`invalidIntValue,
                    Data`invalidFloatValue,
                    Data`invalidCharValue));
    
    basic_read_int : Register ==> Data`Int
    basic_read_int(src) ==
        let r : Register = src + registerOffset, reg : Reg = registers(r)
        in
            (if reg.i <> Data`invalidIntValue then return reg.i;
            let i : Data`Int = Data`oid2int(reg.oid)
            in
                if
                    i <> Data`invalidIntValue
                then
                    (registers(r) .i := i;
                    return i);
            return Data`invalidIntValue);
    
    read_int : Register ==> Data`Int
    read_int(src) ==
        (let i : Data`Int = basic_read_int(src)
        in if i <> Data`invalidIntValue then return i;
        let f : Data`Float = basic_read_float(src)
        in
            if
                f <> Data`invalidFloatValue
            then
                let
                    r : Register = src + registerOffset,
                    f2 = Data`float2real(f),
                    int_f = floor (r + 0.5)
                in
                    if
                        f2 = int_f
                    then
                        (registers(r) .i := int_f;
                        return int_f);
        return Data`invalidIntValue);
    
    write_int : Register * Data`Int ==> ()
    write_int(dst, i) ==
        let r = dst + registerOffset, p = registers(r).oid
        in
            (if Data`isPointer(p) then Memory`decrement_reference_count(p);
            registers(r)
                := mk_Reg(Data`invalidTag, i, Data`invalidFloatValue, Data`invalidCharValue));
    
    basic_read_float : Register ==> Data`Float
    basic_read_float(src) ==
        let r : Register = src + registerOffset, reg : Reg = registers(r)
        in
            (if reg.f <> Data`invalidFloatValue then return reg.f;
            let f : Data`Float = Data`oid2float(reg.oid)
            in
                if
                    f <> Data`invalidFloatValue
                then
                    (registers(r) .f := f;
                    return f);
            return Data`invalidFloatValue);
    
    read_float : Register ==> Data`Float
    read_float(src) ==
        (let f : Data`Float = basic_read_float(src)
        in if f <> Data`invalidFloatValue then return f;
        let i : Data`Int = basic_read_int(src)
        in
            if
                i <> Data`invalidIntValue
            then
                let f : Data`Float = Data`real2float(i)
                in
                    (registers(src + registerOffset) .f := f;
                    return f);
        return Data`invalidFloatValue);
    
    read_float : Register ==> Data`Float
    read_float(src) ==
        (let f : Data`Float = basic_read_float(src)
        in if f <> Data`invalidFloatValue then return f;
        let
            r : Register = registerOffset + src,
            reg : Reg = registers(r),
            f : [Data`Float] = reg.f
        in
            let i : Data`Int = basic_read_int(r)
            in
                if
                    i <> Data`invalidIntValue
                then
                    let f3 : Data`Float = Data`real2float(i)
                    in
                        (registers(r) .f := f3;
                        return f3);
        return Data`invalidFloatValue);
    
    write_float : Register * Data`Float ==> ()
    write_float(dst, f) ==
        let r = dst + registerOffset, p = registers(r).oid
        in
            (if Data`isPointer(p) then Memory`decrement_reference_count(p);
            registers(r)
                := mk_Reg(Data`invalidTag, Data`invalidIntValue, f, Data`invalidCharValue));
    
    read_char : Register ==> Data`Char
    read_char(src) ==
        let
            r = src + registerOffset,
            reg : Reg = registers(r),
            c : [Data`Char] = reg.c
        in
            if
                c = Data`invalidCharValue
            then
                let c2 : Data`Char = Data`oid2char(reg.oid)
                in
                    (registers(r) .c := c2;
                    return c2)
            else
                return c;
    
    write_char : Register * Data`Char ==> ()
    write_char(dst, c) ==
        let r = dst + registerOffset, p = registers(r).oid
        in
            (if Data`isPointer(p) then Memory`decrement_reference_count(p);
            registers(r)
                := mk_Reg(Data`invalidTag, Data`invalidIntValue, Data`invalidFloatValue, c));
    
    pure read_pointer : Register ==> Data`Pointer
    read_pointer(src) ==
        return Data`oid2pointer(registers(src + registerOffset).oid);
    
    write_pointer : Register * Data`Pointer ==> ()
    write_pointer(dst, p) ==
        let r = dst + registerOffset, p1 = registers(r).oid
        in
            (if p <> Data`invalidPointerValue then Memory`increment_reference_count(p);
            if Data`isPointer(p1) then Memory`decrement_reference_count(p1);
            registers(r)
                := mk_Reg(
                    Data`pointer2oid(p),
                    Data`invalidIntValue,
                    Data`invalidFloatValue,
                    Data`invalidCharValue));
    
    write_invalid : Register ==> ()
    write_invalid(dst) ==
        let r = dst + registerOffset, p = registers(r).oid
        in
            (if Data`isPointer(p) then Memory`decrement_reference_count(p);
            registers(r) .oid := Data`invalidOidValue);

end Register
