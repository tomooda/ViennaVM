module RegisterTest
imports
    from Register all,
    from Data all,
    from UnitTesting operations assertEquals renamed assertEquals;
exports all
definitions
operations
    testRead_oid : () ==> ()
    testRead_oid() ==
        let
            int1 : Data`Int = 0x1234,
            int2 : Data`Int = 0x5678,
            float1 : Data`Float = mk_Data`Float(0, 120, 12345),
            char1 : Data`Char = 0x40,
            pointer1 : Data`Pointer = 0xabcd,
            oid1 : Data`OID = Data`int2oid(int1),
            oid2 : Data`OID = Data`int2oid(int2)
        in
            (skip;
				-- registers are independent each other
            Register`write_oid(1, oid1);
            Register`write_oid(2, oid2);
            assertEquals(Register`read_oid(1), oid1);
            assertEquals(Register`read_oid(2), oid2);
				/* box and read int */
            Register`write_int(1, int2);
            assertEquals(Register`read_oid(1), Data`int2oid(int2));
            Register`write_int(1, Data`invalidIntValue);
            assertEquals(Register`read_oid(1), Data`invalidOidValue);
				/* box and read float */
            Register`write_float(1, float1);
            assertEquals(Register`read_oid(1), Data`float2oid(float1));
            Register`write_float(1, Data`invalidFloatValue);
            assertEquals(Register`read_oid(1), Data`invalidOidValue);
				/* box and read char */
            Register`write_char(1, char1);
            assertEquals(Register`read_oid(1), Data`char2oid(char1));
            Register`write_char(1, Data`invalidCharValue);
            assertEquals(Register`read_oid(1), Data`invalidOidValue);
				/* box and read pointer */
            Register`write_pointer(1, pointer1);
            assertEquals(Register`read_oid(1), Data`pointer2oid(pointer1));
            Register`write_pointer(1, Data`invalidPointerValue);
            assertEquals(Register`read_oid(1), Data`invalidOidValue);
				/* read invalid oid */
            Register`write_oid(1, Data`invalidOidValue);
            assertEquals(Register`read_oid(1), Data`invalidOidValue));
    
    testWrite_oid : () ==> ()
    testWrite_oid() ==
        let
            int1 : Data`Int = 0x1234,
            int2 : Data`Int = 0x5678,
            float1 : Data`Float = mk_Data`Float(0, 120, 12345),
            char1 : Data`Char = 0x40,
            pointer1 : Data`Pointer = 0xabcd,
            oid1 : Data`OID = Data`int2oid(int1),
            oid2 : Data`OID = Data`int2oid(int2)
        in
            (skip;
				-- registers are independent each other
            Register`write_oid(1, oid1);
            Register`write_oid(2, oid2);
            assertEquals(Register`read_oid(1), oid1);
            assertEquals(Register`read_oid(2), oid2);
				/* write boxed int and unbox */
            Register`write_oid(1, Data`int2oid(int1));
            assertEquals(Register`read_int(1), int1);
            assertEquals(Register`read_float(1), Data`invalidFloatValue);
            assertEquals(Register`read_char(1), Data`invalidCharValue);
            assertEquals(Register`read_pointer(1), Data`invalidPointerValue);
				/* write boxed float and unbox */
            Register`write_oid(1, Data`float2oid(float1));
            assertEquals(Register`read_int(1), Data`invalidIntValue);
            assertEquals(Register`read_float(1), float1);
            assertEquals(Register`read_char(1), Data`invalidCharValue);
            assertEquals(Register`read_pointer(1), Data`invalidPointerValue);
				/* write boxed char and unbox */
            Register`write_oid(1, Data`char2oid(char1));
            assertEquals(Register`read_int(1), Data`invalidIntValue);
            assertEquals(Register`read_float(1), Data`invalidFloatValue);
            assertEquals(Register`read_char(1), char1);
            assertEquals(Register`read_pointer(1), Data`invalidPointerValue);
				/* write boxed pointer and unbox */
            Register`write_oid(1, Data`pointer2oid(pointer1));
            assertEquals(Register`read_int(1), Data`invalidIntValue);
            assertEquals(Register`read_float(1), Data`invalidFloatValue);
            assertEquals(Register`read_char(1), Data`invalidCharValue);
            assertEquals(Register`read_pointer(1), pointer1);
				/* write invalid oop and unbox */
            Register`write_oid(1, Data`invalidOidValue);
            assertEquals(Register`read_int(1), Data`invalidIntValue);
            assertEquals(Register`read_float(1), Data`invalidFloatValue);
            assertEquals(Register`read_char(1), Data`invalidCharValue);
            assertEquals(Register`read_pointer(1), Data`invalidPointerValue));

end RegisterTest

