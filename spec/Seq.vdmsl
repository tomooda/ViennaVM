module Seq
imports
    from Data all,
    from Memory all,
    from Equality all
exports all
definitions
operations
    alloc : Data`Qword ==> Data`Pointer
    alloc(s) == return Memory`alloc(s)
    pre  s >= 1;
    
    make_string : seq of char ==> Data`OID
    make_string(string) ==
        if
            string = []
        then
            return Data`emptySeqValue
        else
            let p : Data`Pointer = alloc(len string)
            in
                (for i = 1 to  len string
                do write(p, i, Data`char2oid(Data`char2int(string(i))));
                return Data`pointer2oid(p));
    
    size : Data`Pointer ==> Data`Qword
    size(p) == return Memory`slots_size(p);
    
    read : Data`Pointer * Data`Qword ==> Data`OID
    read(p, index) == return Memory`read_slot(p, index)
    pre  index >= 1 and Memory`slots_size(p) >= index;
    
    write : Data`Pointer * Data`Qword * Data`OID ==> ()
    write(p, index, elem) == Memory`write_slot(p, index, elem)
    pre  index >= 1 and Memory`slots_size(p) >= index;

end Seq
