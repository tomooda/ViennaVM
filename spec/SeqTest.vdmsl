module SeqTest
imports
    from Data all,
    from Memory all,
    from Equality all,
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assert renamed assert;,
    from Seq all
exports all
definitions
operations
    makeSeq : seq of Data`OID ==> Data`Pointer
    makeSeq(oids) ==
        let p : Data`Pointer = Seq`alloc(len oids)
        in
            (for i = 1 to  len oids do Memory`write_slot(p, i, oids(i));
            return p)
    pre  len oids > 0;
    
    test_alloc : () ==> ()
    test_alloc() ==
        let p1 = Seq`alloc(1), p2 = Seq`alloc(2)
        in
            (assertEquals(Seq`size(p1), 1, "size(alloc(1)) = 1");
            assertEquals(Seq`size(p2), 2, "size(alloc(2)) = 2");
            assertEquals(Seq`read(p1, 1), Data`invalidOidValue, "s1(1) = undefined");
            assertEquals(Seq`read(p2, 1), Data`invalidOidValue, "s2(1) = undefined");
            assertEquals(Seq`read(p2, 2), Data`invalidOidValue, "s2(2) = undefined"));
    
    test_make_string : () ==> ()
    test_make_string() ==
        let p = Data`oid2pointer(Seq`make_string("abc"))
        in
            (assertEquals(Memory`slots_size(p), 3, "len \"abc\" = 3 using Memory");
            assertEquals(Seq`size(p), 3, "len \"abc\" = 3");
            assert(Data`isChar(Seq`read(p, 1)), "\"abc\"(1) is a char");
            assertEquals(Data`oid2char(Seq`read(p, 1)), 0x61, "\"abc\"(1) = 'a'");
            assertEquals(Data`oid2char(Seq`read(p, 2)), 0x62, "\"abc\"(2) = 'b'");
            assertEquals(Data`oid2char(Seq`read(p, 3)), 0x63, "\"abc\"(3) = 'c'"));
    
    test_size : () ==> ()
    test_size() ==
        let
            p1 = makeSeq([Data`int2oid(1)]),
            p2 =
                makeSeq(
                    [Data`int2oid(1),
                    Data`pointer2oid(makeSeq([Data`int2oid(2), Data`int2oid(3)]))])
        in
            (assertEquals(Seq`size(p1), 1, "size([1])");
            assertEquals(Seq`size(p2), 2, "size([1, [2,3]])");
            Memory`release(Data`oid2pointer(p1));
            Memory`release(Data`oid2pointer(p2)));
    
    test_read_write : () ==> ()
    test_read_write() ==
        let p = Seq`alloc(2)
        in
            (assertEquals(Seq`size(p), 2, "size(alloc(2)) = 2");
            assertEquals(Seq`read(p, 1), Data`invalidOidValue, "s(1) = undefined");
            assertEquals(Seq`read(p, 2), Data`invalidOidValue, "s(2) = undefined");
            Seq`write(p, 1, Data`int2oid(3));
            Seq`write(p, 2, Data`int2oid(4));
            assertEquals(Seq`read(p, 1), Data`int2oid(3), "[3,4](1) = 3");
            assertEquals(Seq`read(p, 2), Data`int2oid(4), "[3,4](2) = 4"));

end SeqTest
