module TupleTest
imports
    from Data all,
    from Memory all,
    from Equality all,
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assert renamed assert;,
    from Tuple all
exports all
definitions
operations
    makeTuple : seq of Data`OID ==> Data`Pointer
    makeTuple(oids) ==
        let p : Data`Pointer = Tuple`alloc(len oids)
        in
            (for i = 1 to  len oids do Memory`write_slot(p, i, oids(i));
            return p)
    pre  len oids >= 2;
    
    test_alloc : () ==> ()
    test_alloc() ==
        let p1 = Tuple`alloc(2), p2 = Tuple`alloc(3)
        in
            (assertEquals(Tuple`size(p1), 2, "size(alloc(2)) = 2");
            assertEquals(Tuple`size(p2), 3, "size(alloc(3)) = 3");
            assertEquals(Tuple`read(p1, 1), Data`invalidOidValue, "p1(1) = undefined");
            assertEquals(Tuple`read(p1, 2), Data`invalidOidValue, "p1(2) = undefined");
            assertEquals(Tuple`read(p2, 1), Data`invalidOidValue, "p2(1) = undefined");
            assertEquals(Tuple`read(p2, 2), Data`invalidOidValue, "p2(2) = undefined");
            assertEquals(Tuple`read(p2, 3), Data`invalidOidValue, "p2(3) = undefined"));
    
    test_size : () ==> ()
    test_size() ==
        let
            p =
                makeTuple(
                    [Data`int2oid(1),
                    makeTuple([Data`int2oid(2), Data`int2oid(3), Data`int2oid(4)])])
        in
            (assertEquals(Tuple`size(p), 2, "arity of mk_(1, mk_(2, 3, 4)) is 2");
            assertEquals(
                Tuple`size(Data`oid2pointer(Tuple`read(p, 2))),
                3,
                "arity of mk_(1, mk_(2, 3, 4)).#2 is 3");
            Memory`release(p));
    
    test_read_write : () ==> ()
    test_read_write() ==
        let p = Tuple`alloc(2)
        in
            (assertEquals(Tuple`size(p), 2, "size(alloc(2)) = 2");
            assertEquals(Tuple`read(p, 1), Data`invalidOidValue, "p(1) = undefined");
            assertEquals(Tuple`read(p, 2), Data`invalidOidValue, "p(2) = undefined");
            Tuple`write(p, 1, Data`int2oid(3));
            Tuple`write(p, 2, Data`int2oid(4));
            assertEquals(Tuple`read(p, 1), Data`int2oid(3), "mk_(3, 4).#1 = 3");
            assertEquals(Tuple`read(p, 2), Data`int2oid(4), "mk_(3, 4).#2 = 4"));
    
end TupleTest
