module TupleTest
imports
    from Data all,
    from Memory all,
    from Equality all,
    from UnitTesting
        operations
            assertEquals renamed assertEquals;
            assert renamed assert;,
    from Tuple all
exports all
definitions
operations
    test_alloc : () ==> ()
    test_alloc() ==
        let s1 = Tuple`alloc(2), s2 = Tuple`alloc(3)
        in
            (assertEquals(Tuple`size(s1), 2, "size(alloc(2)) = 2");
            assertEquals(Tuple`size(s2), 3, "size(alloc(3)) = 3");
            assertEquals(Tuple`read(s1, 1), Data`invalidOidValue, "s1(1) = undefined");
            assertEquals(Tuple`read(s1, 2), Data`invalidOidValue, "s1(2) = undefined");
            assertEquals(Tuple`read(s2, 1), Data`invalidOidValue, "s2(1) = undefined");
            assertEquals(Tuple`read(s2, 2), Data`invalidOidValue, "s2(2) = undefined");
            assertEquals(Tuple`read(s2, 3), Data`invalidOidValue, "s2(3) = undefined"));
    
    test_make : () ==> ()
    test_make() ==
        let
            s1 =
                Tuple`make(
                    [Data`int2oid(1), Data`int2oid(2),
                    Tuple`make([Data`int2oid(3), Data`int2oid(4)])])
        in
            (assertEquals(Tuple`read(s1, 1), Data`int2oid(1), "mk_(1,2,mk_(3,4)).#1 = 1");
            assertEquals(Tuple`read(s1, 2), Data`int2oid(2), "mk_(1,2, mk_(3, 4)).#2 = 2");
            assertEquals(
                Tuple`read(Tuple`read(s1, 3), 1),
                Data`int2oid(3),
                "mk_(1,2,mk_(3, 4)).#3.#1 = 3");
            assertEquals(
                Tuple`read(Tuple`read(s1, 3), 2),
                Data`int2oid(4),
                "mk_(1,2,mk_(3, 4)).#3.#2 = 4"));
    
    test_size : () ==> ()
    test_size() ==
        let
            s =
                Tuple`make(
                    [Data`int2oid(1),
                    Tuple`make([Data`int2oid(2), Data`int2oid(3), Data`int2oid(4)])])
        in
            (assertEquals(Tuple`size(s), 2, "arity of mk_(1, mk_(2, 3, 4)) is 2");
            assertEquals(
                Tuple`size(Tuple`read(s, 2)),
                3,
                "arity of mk_(1, mk_(2, 3, 4)).#2 is 3");
            Memory`release(Data`oid2pointer(s)));
    
    test_read_write : () ==> ()
    test_read_write() ==
        let s = Tuple`alloc(2)
        in
            (assertEquals(Tuple`size(s), 2, "size(alloc(2)) = 2");
            assertEquals(Tuple`read(s, 1), Data`invalidOidValue, "s(1) = undefined");
            assertEquals(Tuple`read(s, 2), Data`invalidOidValue, "s(2) = undefined");
            Tuple`write(s, 1, Data`int2oid(3));
            Tuple`write(s, 2, Data`int2oid(4));
            assertEquals(Tuple`read(s, 1), Data`int2oid(3), "mk_(3, 4).#1 = 3");
            assertEquals(Tuple`read(s, 2), Data`int2oid(4), "mk_(3, 4).#2 = 4"));
    
    test_equal : () ==> ()
    test_equal() ==
        let
            s1 = Tuple`make([Data`int2oid(1), Data`int2oid(2)]),
            s2 = Tuple`make([Data`int2oid(1), Data`int2oid(2)]),
            s3 = Tuple`make([Data`int2oid(2), Data`int2oid(1)])
        in
            (assert(Tuple`equal(s1, s1), "s1 = s1");
            assert(Tuple`equal(s1, s2), "mk_(1, 2) = mk_(1, 2)");
            assert(not Tuple`equal(s1, s3), "mk_(1, 2) <> mk_(2, 1)"));

end TupleTest
